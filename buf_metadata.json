{"file":[{"name":"google/protobuf/descriptor.proto","package":"google.protobuf","messageType":[{"name":"FileDescriptorSet","field":[{"name":"file","number":1,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.FileDescriptorProto","jsonName":"file"}],"extensionRange":[{"start":536000000,"end":536000001,"options":{"declaration":[{"number":536000000,"fullName":".buf.descriptor.v1.buf_file_descriptor_set_extension","type":".buf.descriptor.v1.FileDescriptorSetExtension"}]}}]},{"name":"FileDescriptorProto","field":[{"name":"name","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"name"},{"name":"package","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"package"},{"name":"dependency","number":3,"label":"LABEL_REPEATED","type":"TYPE_STRING","jsonName":"dependency"},{"name":"public_dependency","number":10,"label":"LABEL_REPEATED","type":"TYPE_INT32","jsonName":"publicDependency"},{"name":"weak_dependency","number":11,"label":"LABEL_REPEATED","type":"TYPE_INT32","jsonName":"weakDependency"},{"name":"message_type","number":4,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.DescriptorProto","jsonName":"messageType"},{"name":"enum_type","number":5,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.EnumDescriptorProto","jsonName":"enumType"},{"name":"service","number":6,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.ServiceDescriptorProto","jsonName":"service"},{"name":"extension","number":7,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.FieldDescriptorProto","jsonName":"extension"},{"name":"options","number":8,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.FileOptions","jsonName":"options"},{"name":"source_code_info","number":9,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.SourceCodeInfo","jsonName":"sourceCodeInfo"},{"name":"syntax","number":12,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"syntax"},{"name":"edition","number":14,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.Edition","jsonName":"edition"}]},{"name":"DescriptorProto","field":[{"name":"name","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"name"},{"name":"field","number":2,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.FieldDescriptorProto","jsonName":"field"},{"name":"extension","number":6,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.FieldDescriptorProto","jsonName":"extension"},{"name":"nested_type","number":3,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.DescriptorProto","jsonName":"nestedType"},{"name":"enum_type","number":4,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.EnumDescriptorProto","jsonName":"enumType"},{"name":"extension_range","number":5,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.DescriptorProto.ExtensionRange","jsonName":"extensionRange"},{"name":"oneof_decl","number":8,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.OneofDescriptorProto","jsonName":"oneofDecl"},{"name":"options","number":7,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.MessageOptions","jsonName":"options"},{"name":"reserved_range","number":9,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.DescriptorProto.ReservedRange","jsonName":"reservedRange"},{"name":"reserved_name","number":10,"label":"LABEL_REPEATED","type":"TYPE_STRING","jsonName":"reservedName"}],"nestedType":[{"name":"ExtensionRange","field":[{"name":"start","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"start"},{"name":"end","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"end"},{"name":"options","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.ExtensionRangeOptions","jsonName":"options"}]},{"name":"ReservedRange","field":[{"name":"start","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"start"},{"name":"end","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"end"}]}]},{"name":"ExtensionRangeOptions","field":[{"name":"uninterpreted_option","number":999,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption","jsonName":"uninterpretedOption"},{"name":"declaration","number":2,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.ExtensionRangeOptions.Declaration","jsonName":"declaration","options":{"retention":"RETENTION_SOURCE"}},{"name":"features","number":50,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.FeatureSet","jsonName":"features"},{"name":"verification","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.ExtensionRangeOptions.VerificationState","defaultValue":"UNVERIFIED","jsonName":"verification","options":{"retention":"RETENTION_SOURCE"}}],"nestedType":[{"name":"Declaration","field":[{"name":"number","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"number"},{"name":"full_name","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"fullName"},{"name":"type","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"type"},{"name":"reserved","number":5,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"reserved"},{"name":"repeated","number":6,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"repeated"}],"reservedRange":[{"start":4,"end":5}]}],"enumType":[{"name":"VerificationState","value":[{"name":"DECLARATION","number":0},{"name":"UNVERIFIED","number":1}]}],"extensionRange":[{"start":1000,"end":536870912}]},{"name":"FieldDescriptorProto","field":[{"name":"name","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"name"},{"name":"number","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"number"},{"name":"label","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.FieldDescriptorProto.Label","jsonName":"label"},{"name":"type","number":5,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.FieldDescriptorProto.Type","jsonName":"type"},{"name":"type_name","number":6,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"typeName"},{"name":"extendee","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"extendee"},{"name":"default_value","number":7,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"defaultValue"},{"name":"oneof_index","number":9,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"oneofIndex"},{"name":"json_name","number":10,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"jsonName"},{"name":"options","number":8,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.FieldOptions","jsonName":"options"},{"name":"proto3_optional","number":17,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"proto3Optional"}],"enumType":[{"name":"Type","value":[{"name":"TYPE_DOUBLE","number":1},{"name":"TYPE_FLOAT","number":2},{"name":"TYPE_INT64","number":3},{"name":"TYPE_UINT64","number":4},{"name":"TYPE_INT32","number":5},{"name":"TYPE_FIXED64","number":6},{"name":"TYPE_FIXED32","number":7},{"name":"TYPE_BOOL","number":8},{"name":"TYPE_STRING","number":9},{"name":"TYPE_GROUP","number":10},{"name":"TYPE_MESSAGE","number":11},{"name":"TYPE_BYTES","number":12},{"name":"TYPE_UINT32","number":13},{"name":"TYPE_ENUM","number":14},{"name":"TYPE_SFIXED32","number":15},{"name":"TYPE_SFIXED64","number":16},{"name":"TYPE_SINT32","number":17},{"name":"TYPE_SINT64","number":18}]},{"name":"Label","value":[{"name":"LABEL_OPTIONAL","number":1},{"name":"LABEL_REPEATED","number":3},{"name":"LABEL_REQUIRED","number":2}]}]},{"name":"OneofDescriptorProto","field":[{"name":"name","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"name"},{"name":"options","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.OneofOptions","jsonName":"options"}]},{"name":"EnumDescriptorProto","field":[{"name":"name","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"name"},{"name":"value","number":2,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.EnumValueDescriptorProto","jsonName":"value"},{"name":"options","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.EnumOptions","jsonName":"options"},{"name":"reserved_range","number":4,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.EnumDescriptorProto.EnumReservedRange","jsonName":"reservedRange"},{"name":"reserved_name","number":5,"label":"LABEL_REPEATED","type":"TYPE_STRING","jsonName":"reservedName"}],"nestedType":[{"name":"EnumReservedRange","field":[{"name":"start","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"start"},{"name":"end","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"end"}]}]},{"name":"EnumValueDescriptorProto","field":[{"name":"name","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"name"},{"name":"number","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"number"},{"name":"options","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.EnumValueOptions","jsonName":"options"}]},{"name":"ServiceDescriptorProto","field":[{"name":"name","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"name"},{"name":"method","number":2,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.MethodDescriptorProto","jsonName":"method"},{"name":"options","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.ServiceOptions","jsonName":"options"}]},{"name":"MethodDescriptorProto","field":[{"name":"name","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"name"},{"name":"input_type","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"inputType"},{"name":"output_type","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"outputType"},{"name":"options","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.MethodOptions","jsonName":"options"},{"name":"client_streaming","number":5,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"clientStreaming"},{"name":"server_streaming","number":6,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"serverStreaming"}]},{"name":"FileOptions","field":[{"name":"java_package","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"javaPackage"},{"name":"java_outer_classname","number":8,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"javaOuterClassname"},{"name":"java_multiple_files","number":10,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"javaMultipleFiles"},{"name":"java_generate_equals_and_hash","number":20,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"javaGenerateEqualsAndHash","options":{"deprecated":true}},{"name":"java_string_check_utf8","number":27,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"javaStringCheckUtf8"},{"name":"optimize_for","number":9,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.FileOptions.OptimizeMode","defaultValue":"SPEED","jsonName":"optimizeFor"},{"name":"go_package","number":11,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"goPackage"},{"name":"cc_generic_services","number":16,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"ccGenericServices"},{"name":"java_generic_services","number":17,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"javaGenericServices"},{"name":"py_generic_services","number":18,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"pyGenericServices"},{"name":"deprecated","number":23,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"deprecated"},{"name":"cc_enable_arenas","number":31,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"true","jsonName":"ccEnableArenas"},{"name":"objc_class_prefix","number":36,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"objcClassPrefix"},{"name":"csharp_namespace","number":37,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"csharpNamespace"},{"name":"swift_prefix","number":39,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"swiftPrefix"},{"name":"php_class_prefix","number":40,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"phpClassPrefix"},{"name":"php_namespace","number":41,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"phpNamespace"},{"name":"php_metadata_namespace","number":44,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"phpMetadataNamespace"},{"name":"ruby_package","number":45,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"rubyPackage"},{"name":"features","number":50,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.FeatureSet","jsonName":"features"},{"name":"uninterpreted_option","number":999,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption","jsonName":"uninterpretedOption"}],"enumType":[{"name":"OptimizeMode","value":[{"name":"SPEED","number":1},{"name":"CODE_SIZE","number":2},{"name":"LITE_RUNTIME","number":3}]}],"extensionRange":[{"start":1000,"end":536870912}],"reservedRange":[{"start":42,"end":43},{"start":38,"end":39}],"reservedName":["php_generic_services"]},{"name":"MessageOptions","field":[{"name":"message_set_wire_format","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"messageSetWireFormat"},{"name":"no_standard_descriptor_accessor","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"noStandardDescriptorAccessor"},{"name":"deprecated","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"deprecated"},{"name":"map_entry","number":7,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"mapEntry"},{"name":"deprecated_legacy_json_field_conflicts","number":11,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"deprecatedLegacyJsonFieldConflicts","options":{"deprecated":true}},{"name":"features","number":12,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.FeatureSet","jsonName":"features"},{"name":"uninterpreted_option","number":999,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption","jsonName":"uninterpretedOption"}],"extensionRange":[{"start":1000,"end":536870912}],"reservedRange":[{"start":4,"end":5},{"start":5,"end":6},{"start":6,"end":7},{"start":8,"end":9},{"start":9,"end":10}]},{"name":"FieldOptions","field":[{"name":"ctype","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.FieldOptions.CType","defaultValue":"STRING","jsonName":"ctype"},{"name":"packed","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"packed"},{"name":"jstype","number":6,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.FieldOptions.JSType","defaultValue":"JS_NORMAL","jsonName":"jstype"},{"name":"lazy","number":5,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"lazy"},{"name":"unverified_lazy","number":15,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"unverifiedLazy"},{"name":"deprecated","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"deprecated"},{"name":"weak","number":10,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"weak"},{"name":"debug_redact","number":16,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"debugRedact"},{"name":"retention","number":17,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.FieldOptions.OptionRetention","jsonName":"retention"},{"name":"targets","number":19,"label":"LABEL_REPEATED","type":"TYPE_ENUM","typeName":".google.protobuf.FieldOptions.OptionTargetType","jsonName":"targets"},{"name":"edition_defaults","number":20,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.FieldOptions.EditionDefault","jsonName":"editionDefaults"},{"name":"features","number":21,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.FeatureSet","jsonName":"features"},{"name":"feature_support","number":22,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.FieldOptions.FeatureSupport","jsonName":"featureSupport"},{"name":"uninterpreted_option","number":999,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption","jsonName":"uninterpretedOption"}],"nestedType":[{"name":"EditionDefault","field":[{"name":"edition","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.Edition","jsonName":"edition"},{"name":"value","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"value"}]},{"name":"FeatureSupport","field":[{"name":"edition_introduced","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.Edition","jsonName":"editionIntroduced"},{"name":"edition_deprecated","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.Edition","jsonName":"editionDeprecated"},{"name":"deprecation_warning","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"deprecationWarning"},{"name":"edition_removed","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.Edition","jsonName":"editionRemoved"}]}],"enumType":[{"name":"CType","value":[{"name":"STRING","number":0},{"name":"CORD","number":1},{"name":"STRING_PIECE","number":2}]},{"name":"JSType","value":[{"name":"JS_NORMAL","number":0},{"name":"JS_STRING","number":1},{"name":"JS_NUMBER","number":2}]},{"name":"OptionRetention","value":[{"name":"RETENTION_UNKNOWN","number":0},{"name":"RETENTION_RUNTIME","number":1},{"name":"RETENTION_SOURCE","number":2}]},{"name":"OptionTargetType","value":[{"name":"TARGET_TYPE_UNKNOWN","number":0},{"name":"TARGET_TYPE_FILE","number":1},{"name":"TARGET_TYPE_EXTENSION_RANGE","number":2},{"name":"TARGET_TYPE_MESSAGE","number":3},{"name":"TARGET_TYPE_FIELD","number":4},{"name":"TARGET_TYPE_ONEOF","number":5},{"name":"TARGET_TYPE_ENUM","number":6},{"name":"TARGET_TYPE_ENUM_ENTRY","number":7},{"name":"TARGET_TYPE_SERVICE","number":8},{"name":"TARGET_TYPE_METHOD","number":9}]}],"extensionRange":[{"start":1000,"end":536870912}],"reservedRange":[{"start":4,"end":5},{"start":18,"end":19}]},{"name":"OneofOptions","field":[{"name":"features","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.FeatureSet","jsonName":"features"},{"name":"uninterpreted_option","number":999,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption","jsonName":"uninterpretedOption"}],"extensionRange":[{"start":1000,"end":536870912}]},{"name":"EnumOptions","field":[{"name":"allow_alias","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"allowAlias"},{"name":"deprecated","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"deprecated"},{"name":"deprecated_legacy_json_field_conflicts","number":6,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"deprecatedLegacyJsonFieldConflicts","options":{"deprecated":true}},{"name":"features","number":7,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.FeatureSet","jsonName":"features"},{"name":"uninterpreted_option","number":999,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption","jsonName":"uninterpretedOption"}],"extensionRange":[{"start":1000,"end":536870912}],"reservedRange":[{"start":5,"end":6}]},{"name":"EnumValueOptions","field":[{"name":"deprecated","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"deprecated"},{"name":"features","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.FeatureSet","jsonName":"features"},{"name":"debug_redact","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"debugRedact"},{"name":"feature_support","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.FieldOptions.FeatureSupport","jsonName":"featureSupport"},{"name":"uninterpreted_option","number":999,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption","jsonName":"uninterpretedOption"}],"extensionRange":[{"start":1000,"end":536870912}]},{"name":"ServiceOptions","field":[{"name":"features","number":34,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.FeatureSet","jsonName":"features"},{"name":"deprecated","number":33,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"deprecated"},{"name":"uninterpreted_option","number":999,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption","jsonName":"uninterpretedOption"}],"extensionRange":[{"start":1000,"end":536870912}]},{"name":"MethodOptions","field":[{"name":"deprecated","number":33,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"deprecated"},{"name":"idempotency_level","number":34,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.MethodOptions.IdempotencyLevel","defaultValue":"IDEMPOTENCY_UNKNOWN","jsonName":"idempotencyLevel"},{"name":"features","number":35,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.FeatureSet","jsonName":"features"},{"name":"uninterpreted_option","number":999,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption","jsonName":"uninterpretedOption"}],"enumType":[{"name":"IdempotencyLevel","value":[{"name":"IDEMPOTENCY_UNKNOWN","number":0},{"name":"NO_SIDE_EFFECTS","number":1},{"name":"IDEMPOTENT","number":2}]}],"extensionRange":[{"start":1000,"end":536870912}]},{"name":"UninterpretedOption","field":[{"name":"name","number":2,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption.NamePart","jsonName":"name"},{"name":"identifier_value","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"identifierValue"},{"name":"positive_int_value","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_UINT64","jsonName":"positiveIntValue"},{"name":"negative_int_value","number":5,"label":"LABEL_OPTIONAL","type":"TYPE_INT64","jsonName":"negativeIntValue"},{"name":"double_value","number":6,"label":"LABEL_OPTIONAL","type":"TYPE_DOUBLE","jsonName":"doubleValue"},{"name":"string_value","number":7,"label":"LABEL_OPTIONAL","type":"TYPE_BYTES","jsonName":"stringValue"},{"name":"aggregate_value","number":8,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"aggregateValue"}],"nestedType":[{"name":"NamePart","field":[{"name":"name_part","number":1,"label":"LABEL_REQUIRED","type":"TYPE_STRING","jsonName":"namePart"},{"name":"is_extension","number":2,"label":"LABEL_REQUIRED","type":"TYPE_BOOL","jsonName":"isExtension"}]}]},{"name":"FeatureSet","field":[{"name":"field_presence","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.FeatureSet.FieldPresence","jsonName":"fieldPresence","options":{"retention":"RETENTION_RUNTIME","targets":["TARGET_TYPE_FIELD","TARGET_TYPE_FILE"],"editionDefaults":[{"edition":"EDITION_LEGACY","value":"EXPLICIT"},{"edition":"EDITION_PROTO3","value":"IMPLICIT"},{"edition":"EDITION_2023","value":"EXPLICIT"}],"featureSupport":{"editionIntroduced":"EDITION_2023"}}},{"name":"enum_type","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.FeatureSet.EnumType","jsonName":"enumType","options":{"retention":"RETENTION_RUNTIME","targets":["TARGET_TYPE_ENUM","TARGET_TYPE_FILE"],"editionDefaults":[{"edition":"EDITION_LEGACY","value":"CLOSED"},{"edition":"EDITION_PROTO3","value":"OPEN"}],"featureSupport":{"editionIntroduced":"EDITION_2023"}}},{"name":"repeated_field_encoding","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.FeatureSet.RepeatedFieldEncoding","jsonName":"repeatedFieldEncoding","options":{"retention":"RETENTION_RUNTIME","targets":["TARGET_TYPE_FIELD","TARGET_TYPE_FILE"],"editionDefaults":[{"edition":"EDITION_LEGACY","value":"EXPANDED"},{"edition":"EDITION_PROTO3","value":"PACKED"}],"featureSupport":{"editionIntroduced":"EDITION_2023"}}},{"name":"utf8_validation","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.FeatureSet.Utf8Validation","jsonName":"utf8Validation","options":{"retention":"RETENTION_RUNTIME","targets":["TARGET_TYPE_FIELD","TARGET_TYPE_FILE"],"editionDefaults":[{"edition":"EDITION_LEGACY","value":"NONE"},{"edition":"EDITION_PROTO3","value":"VERIFY"}],"featureSupport":{"editionIntroduced":"EDITION_2023"}}},{"name":"message_encoding","number":5,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.FeatureSet.MessageEncoding","jsonName":"messageEncoding","options":{"retention":"RETENTION_RUNTIME","targets":["TARGET_TYPE_FIELD","TARGET_TYPE_FILE"],"editionDefaults":[{"edition":"EDITION_LEGACY","value":"LENGTH_PREFIXED"}],"featureSupport":{"editionIntroduced":"EDITION_2023"}}},{"name":"json_format","number":6,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.FeatureSet.JsonFormat","jsonName":"jsonFormat","options":{"retention":"RETENTION_RUNTIME","targets":["TARGET_TYPE_MESSAGE","TARGET_TYPE_ENUM","TARGET_TYPE_FILE"],"editionDefaults":[{"edition":"EDITION_LEGACY","value":"LEGACY_BEST_EFFORT"},{"edition":"EDITION_PROTO3","value":"ALLOW"}],"featureSupport":{"editionIntroduced":"EDITION_2023"}}}],"enumType":[{"name":"FieldPresence","value":[{"name":"FIELD_PRESENCE_UNKNOWN","number":0},{"name":"EXPLICIT","number":1},{"name":"IMPLICIT","number":2},{"name":"LEGACY_REQUIRED","number":3}]},{"name":"EnumType","value":[{"name":"ENUM_TYPE_UNKNOWN","number":0},{"name":"OPEN","number":1},{"name":"CLOSED","number":2}]},{"name":"RepeatedFieldEncoding","value":[{"name":"REPEATED_FIELD_ENCODING_UNKNOWN","number":0},{"name":"PACKED","number":1},{"name":"EXPANDED","number":2}]},{"name":"Utf8Validation","value":[{"name":"UTF8_VALIDATION_UNKNOWN","number":0},{"name":"VERIFY","number":2},{"name":"NONE","number":3}],"reservedRange":[{"start":1,"end":1}]},{"name":"MessageEncoding","value":[{"name":"MESSAGE_ENCODING_UNKNOWN","number":0},{"name":"LENGTH_PREFIXED","number":1},{"name":"DELIMITED","number":2}]},{"name":"JsonFormat","value":[{"name":"JSON_FORMAT_UNKNOWN","number":0},{"name":"ALLOW","number":1},{"name":"LEGACY_BEST_EFFORT","number":2}]}],"extensionRange":[{"start":1000,"end":9995,"options":{"declaration":[{"number":1000,"fullName":".pb.cpp","type":".pb.CppFeatures"},{"number":1001,"fullName":".pb.java","type":".pb.JavaFeatures"},{"number":1002,"fullName":".pb.go","type":".pb.GoFeatures"},{"number":9990,"fullName":".pb.proto1","type":".pb.Proto1Features"}]}},{"start":9995,"end":10000},{"start":10000,"end":10001}],"reservedRange":[{"start":999,"end":1000}]},{"name":"FeatureSetDefaults","field":[{"name":"defaults","number":1,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault","jsonName":"defaults"},{"name":"minimum_edition","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.Edition","jsonName":"minimumEdition"},{"name":"maximum_edition","number":5,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.Edition","jsonName":"maximumEdition"}],"nestedType":[{"name":"FeatureSetEditionDefault","field":[{"name":"edition","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.Edition","jsonName":"edition"},{"name":"overridable_features","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.FeatureSet","jsonName":"overridableFeatures"},{"name":"fixed_features","number":5,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.FeatureSet","jsonName":"fixedFeatures"}],"reservedRange":[{"start":1,"end":2},{"start":2,"end":3}],"reservedName":["features"]}]},{"name":"SourceCodeInfo","field":[{"name":"location","number":1,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.SourceCodeInfo.Location","jsonName":"location"}],"nestedType":[{"name":"Location","field":[{"name":"path","number":1,"label":"LABEL_REPEATED","type":"TYPE_INT32","jsonName":"path","options":{"packed":true}},{"name":"span","number":2,"label":"LABEL_REPEATED","type":"TYPE_INT32","jsonName":"span","options":{"packed":true}},{"name":"leading_comments","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"leadingComments"},{"name":"trailing_comments","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"trailingComments"},{"name":"leading_detached_comments","number":6,"label":"LABEL_REPEATED","type":"TYPE_STRING","jsonName":"leadingDetachedComments"}]}],"extensionRange":[{"start":536000000,"end":536000001,"options":{"declaration":[{"number":536000000,"fullName":".buf.descriptor.v1.buf_source_code_info_extension","type":".buf.descriptor.v1.SourceCodeInfoExtension"}]}}]},{"name":"GeneratedCodeInfo","field":[{"name":"annotation","number":1,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.GeneratedCodeInfo.Annotation","jsonName":"annotation"}],"nestedType":[{"name":"Annotation","field":[{"name":"path","number":1,"label":"LABEL_REPEATED","type":"TYPE_INT32","jsonName":"path","options":{"packed":true}},{"name":"source_file","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"sourceFile"},{"name":"begin","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"begin"},{"name":"end","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"end"},{"name":"semantic","number":5,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.GeneratedCodeInfo.Annotation.Semantic","jsonName":"semantic"}],"enumType":[{"name":"Semantic","value":[{"name":"NONE","number":0},{"name":"SET","number":1},{"name":"ALIAS","number":2}]}]}]}],"enumType":[{"name":"Edition","value":[{"name":"EDITION_UNKNOWN","number":0},{"name":"EDITION_LEGACY","number":900},{"name":"EDITION_PROTO2","number":998},{"name":"EDITION_PROTO3","number":999},{"name":"EDITION_2023","number":1000},{"name":"EDITION_2024","number":1001},{"name":"EDITION_1_TEST_ONLY","number":1},{"name":"EDITION_2_TEST_ONLY","number":2},{"name":"EDITION_99997_TEST_ONLY","number":99997},{"name":"EDITION_99998_TEST_ONLY","number":99998},{"name":"EDITION_99999_TEST_ONLY","number":99999},{"name":"EDITION_MAX","number":2147483647}]}],"options":{"javaPackage":"com.google.protobuf","javaOuterClassname":"DescriptorProtos","optimizeFor":"SPEED","goPackage":"google.golang.org/protobuf/types/descriptorpb","ccEnableArenas":true,"objcClassPrefix":"GPB","csharpNamespace":"Google.Protobuf.Reflection"},"sourceCodeInfo":{"location":[{"span":[38,0,1306,1]},{"path":[12],"span":[38,0,18],"leadingDetachedComments":[" Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"," Author: kenton@google.com (Kenton Varda)\n  Based on original Protocol Buffers design by\n  Sanjay Ghemawat, Jeff Dean, and others.\n\n The messages in this file describe the definitions found in .proto files.\n A valid .proto file can be translated directly to a FileDescriptorProto\n without any other information (e.g. without reading its imports).\n"]},{"path":[2],"span":[40,0,24]},{"path":[8],"span":[42,0,68]},{"path":[8,11],"span":[42,0,68]},{"path":[8],"span":[43,0,44]},{"path":[8,1],"span":[43,0,44]},{"path":[8],"span":[44,0,49]},{"path":[8,8],"span":[44,0,49]},{"path":[8],"span":[45,0,55]},{"path":[8,37],"span":[45,0,55]},{"path":[8],"span":[46,0,33]},{"path":[8,36],"span":[46,0,33]},{"path":[8],"span":[47,0,31]},{"path":[8,31],"span":[47,0,31]},{"path":[8],"span":[51,0,28]},{"path":[8,9],"span":[51,0,28],"leadingComments":" descriptor.proto must be optimized for speed because reflection-based\n algorithms don't work during bootstrapping.\n"},{"path":[4,0],"span":[55,0,64,1],"leadingComments":" The protocol compiler can output a FileDescriptorSet containing the .proto\n files it parses.\n"},{"path":[4,0,1],"span":[55,8,25]},{"path":[4,0,2,0],"span":[56,2,40]},{"path":[4,0,2,0,4],"span":[56,2,10]},{"path":[4,0,2,0,6],"span":[56,11,30]},{"path":[4,0,2,0,1],"span":[56,31,35]},{"path":[4,0,2,0,3],"span":[56,38,39]},{"path":[4,0,5],"span":[59,2,63,5],"leadingComments":" Extensions for tooling.\n"},{"path":[4,0,5,0],"span":[59,13,22]},{"path":[4,0,5,0,1],"span":[59,13,22]},{"path":[4,0,5,0,2],"span":[59,13,22]},{"path":[4,0,5,0,3],"span":[59,23,63,4]},{"path":[4,0,5,0,3,2,0],"span":[59,24,63,3]},{"path":[4,0,5,0,3,2,0,1],"span":[60,4,21]},{"path":[4,0,5,0,3,2,0,3],"span":[61,4,57]},{"path":[4,0,5,0,3,2,0,2],"span":[62,4,69]},{"path":[5,0],"span":[67,0,100,1],"leadingComments":" The full set of known editions.\n"},{"path":[5,0,1],"span":[67,5,12]},{"path":[5,0,2,0],"span":[69,2,22],"leadingComments":" A placeholder for an unknown edition value.\n"},{"path":[5,0,2,0,1],"span":[69,2,17]},{"path":[5,0,2,0,2],"span":[69,20,21]},{"path":[5,0,2,1],"span":[73,2,23],"leadingComments":" A placeholder edition for specifying default behaviors *before* a feature\n was first introduced.  This is effectively an \"infinite past\".\n"},{"path":[5,0,2,1,1],"span":[73,2,16]},{"path":[5,0,2,1,2],"span":[73,19,22]},{"path":[5,0,2,2],"span":[79,2,23],"leadingComments":" Legacy syntax \"editions\".  These pre-date editions, but behave much like\n distinct editions.  These can't be used to specify the edition of proto\n files, but feature definitions must supply proto2/proto3 defaults for\n backwards compatibility.\n"},{"path":[5,0,2,2,1],"span":[79,2,16]},{"path":[5,0,2,2,2],"span":[79,19,22]},{"path":[5,0,2,3],"span":[80,2,23]},{"path":[5,0,2,3,1],"span":[80,2,16]},{"path":[5,0,2,3,2],"span":[80,19,22]},{"path":[5,0,2,4],"span":[85,2,22],"leadingComments":" Editions that have been released.  The specific values are arbitrary and\n should not be depended on, but they will always be time-ordered for easy\n comparison.\n"},{"path":[5,0,2,4,1],"span":[85,2,14]},{"path":[5,0,2,4,2],"span":[85,17,21]},{"path":[5,0,2,5],"span":[86,2,22]},{"path":[5,0,2,5,1],"span":[86,2,14]},{"path":[5,0,2,5,2],"span":[86,17,21]},{"path":[5,0,2,6],"span":[90,2,26],"leadingComments":" Placeholder editions for testing feature resolution.  These should not be\n used or relied on outside of tests.\n"},{"path":[5,0,2,6,1],"span":[90,2,21]},{"path":[5,0,2,6,2],"span":[90,24,25]},{"path":[5,0,2,7],"span":[91,2,26]},{"path":[5,0,2,7,1],"span":[91,2,21]},{"path":[5,0,2,7,2],"span":[91,24,25]},{"path":[5,0,2,8],"span":[92,2,34]},{"path":[5,0,2,8,1],"span":[92,2,25]},{"path":[5,0,2,8,2],"span":[92,28,33]},{"path":[5,0,2,9],"span":[93,2,34]},{"path":[5,0,2,9,1],"span":[93,2,25]},{"path":[5,0,2,9,2],"span":[93,28,33]},{"path":[5,0,2,10],"span":[94,2,34]},{"path":[5,0,2,10,1],"span":[94,2,25]},{"path":[5,0,2,10,2],"span":[94,28,33]},{"path":[5,0,2,11],"span":[99,2,27],"leadingComments":" Placeholder for specifying unbounded edition support.  This should only\n ever be used by plugins that can expect to never require any changes to\n support a new edition.\n"},{"path":[5,0,2,11,1],"span":[99,2,13]},{"path":[5,0,2,11,2],"span":[99,16,26]},{"path":[4,1],"span":[103,0,137,1],"leadingComments":" Describes a complete .proto file.\n"},{"path":[4,1,1],"span":[103,8,27]},{"path":[4,1,2,0],"span":[104,2,27],"trailingComments":" file name, relative to root of source tree\n"},{"path":[4,1,2,0,4],"span":[104,2,10]},{"path":[4,1,2,0,5],"span":[104,11,17]},{"path":[4,1,2,0,1],"span":[104,18,22]},{"path":[4,1,2,0,3],"span":[104,25,26]},{"path":[4,1,2,1],"span":[105,2,30],"trailingComments":" e.g. \"foo\", \"foo.bar\", etc.\n"},{"path":[4,1,2,1,4],"span":[105,2,10]},{"path":[4,1,2,1,5],"span":[105,11,17]},{"path":[4,1,2,1,1],"span":[105,18,25]},{"path":[4,1,2,1,3],"span":[105,28,29]},{"path":[4,1,2,2],"span":[108,2,33],"leadingComments":" Names of files imported by this file.\n"},{"path":[4,1,2,2,4],"span":[108,2,10]},{"path":[4,1,2,2,5],"span":[108,11,17]},{"path":[4,1,2,2,1],"span":[108,18,28]},{"path":[4,1,2,2,3],"span":[108,31,32]},{"path":[4,1,2,3],"span":[110,2,40],"leadingComments":" Indexes of the public imported files in the dependency list above.\n"},{"path":[4,1,2,3,4],"span":[110,2,10]},{"path":[4,1,2,3,5],"span":[110,11,16]},{"path":[4,1,2,3,1],"span":[110,17,34]},{"path":[4,1,2,3,3],"span":[110,37,39]},{"path":[4,1,2,4],"span":[113,2,38],"leadingComments":" Indexes of the weak imported files in the dependency list.\n For Google-internal migration only. Do not use.\n"},{"path":[4,1,2,4,4],"span":[113,2,10]},{"path":[4,1,2,4,5],"span":[113,11,16]},{"path":[4,1,2,4,1],"span":[113,17,32]},{"path":[4,1,2,4,3],"span":[113,35,37]},{"path":[4,1,2,5],"span":[116,2,44],"leadingComments":" All top-level definitions in this file.\n"},{"path":[4,1,2,5,4],"span":[116,2,10]},{"path":[4,1,2,5,6],"span":[116,11,26]},{"path":[4,1,2,5,1],"span":[116,27,39]},{"path":[4,1,2,5,3],"span":[116,42,43]},{"path":[4,1,2,6],"span":[117,2,45]},{"path":[4,1,2,6,4],"span":[117,2,10]},{"path":[4,1,2,6,6],"span":[117,11,30]},{"path":[4,1,2,6,1],"span":[117,31,40]},{"path":[4,1,2,6,3],"span":[117,43,44]},{"path":[4,1,2,7],"span":[118,2,46]},{"path":[4,1,2,7,4],"span":[118,2,10]},{"path":[4,1,2,7,6],"span":[118,11,33]},{"path":[4,1,2,7,1],"span":[118,34,41]},{"path":[4,1,2,7,3],"span":[118,44,45]},{"path":[4,1,2,8],"span":[119,2,46]},{"path":[4,1,2,8,4],"span":[119,2,10]},{"path":[4,1,2,8,6],"span":[119,11,31]},{"path":[4,1,2,8,1],"span":[119,32,41]},{"path":[4,1,2,8,3],"span":[119,44,45]},{"path":[4,1,2,9],"span":[121,2,35]},{"path":[4,1,2,9,4],"span":[121,2,10]},{"path":[4,1,2,9,6],"span":[121,11,22]},{"path":[4,1,2,9,1],"span":[121,23,30]},{"path":[4,1,2,9,3],"span":[121,33,34]},{"path":[4,1,2,10],"span":[127,2,47],"leadingComments":" This field contains optional information about the original source code.\n You may safely remove this entire field without harming runtime\n functionality of the descriptors -- the information is needed only by\n development tools.\n"},{"path":[4,1,2,10,4],"span":[127,2,10]},{"path":[4,1,2,10,6],"span":[127,11,25]},{"path":[4,1,2,10,1],"span":[127,26,42]},{"path":[4,1,2,10,3],"span":[127,45,46]},{"path":[4,1,2,11],"span":[133,2,30],"leadingComments":" The syntax of the proto file.\n The supported values are \"proto2\", \"proto3\", and \"editions\".\n\n If `edition` is present, this value must be \"editions\".\n"},{"path":[4,1,2,11,4],"span":[133,2,10]},{"path":[4,1,2,11,5],"span":[133,11,17]},{"path":[4,1,2,11,1],"span":[133,18,24]},{"path":[4,1,2,11,3],"span":[133,27,29]},{"path":[4,1,2,12],"span":[136,2,32],"leadingComments":" The edition of the proto file.\n"},{"path":[4,1,2,12,4],"span":[136,2,10]},{"path":[4,1,2,12,6],"span":[136,11,18]},{"path":[4,1,2,12,1],"span":[136,19,26]},{"path":[4,1,2,12,3],"span":[136,29,31]},{"path":[4,2],"span":[140,0,172,1],"leadingComments":" Describes a message type.\n"},{"path":[4,2,1],"span":[140,8,23]},{"path":[4,2,2,0],"span":[141,2,27]},{"path":[4,2,2,0,4],"span":[141,2,10]},{"path":[4,2,2,0,5],"span":[141,11,17]},{"path":[4,2,2,0,1],"span":[141,18,22]},{"path":[4,2,2,0,3],"span":[141,25,26]},{"path":[4,2,2,1],"span":[143,2,42]},{"path":[4,2,2,1,4],"span":[143,2,10]},{"path":[4,2,2,1,6],"span":[143,11,31]},{"path":[4,2,2,1,1],"span":[143,32,37]},{"path":[4,2,2,1,3],"span":[143,40,41]},{"path":[4,2,2,2],"span":[144,2,46]},{"path":[4,2,2,2,4],"span":[144,2,10]},{"path":[4,2,2,2,6],"span":[144,11,31]},{"path":[4,2,2,2,1],"span":[144,32,41]},{"path":[4,2,2,2,3],"span":[144,44,45]},{"path":[4,2,2,3],"span":[146,2,43]},{"path":[4,2,2,3,4],"span":[146,2,10]},{"path":[4,2,2,3,6],"span":[146,11,26]},{"path":[4,2,2,3,1],"span":[146,27,38]},{"path":[4,2,2,3,3],"span":[146,41,42]},{"path":[4,2,2,4],"span":[147,2,45]},{"path":[4,2,2,4,4],"span":[147,2,10]},{"path":[4,2,2,4,6],"span":[147,11,30]},{"path":[4,2,2,4,1],"span":[147,31,40]},{"path":[4,2,2,4,3],"span":[147,43,44]},{"path":[4,2,3,0],"span":[149,2,154,3]},{"path":[4,2,3,0,1],"span":[149,10,24]},{"path":[4,2,3,0,2,0],"span":[150,4,29],"trailingComments":" Inclusive.\n"},{"path":[4,2,3,0,2,0,4],"span":[150,4,12]},{"path":[4,2,3,0,2,0,5],"span":[150,13,18]},{"path":[4,2,3,0,2,0,1],"span":[150,19,24]},{"path":[4,2,3,0,2,0,3],"span":[150,27,28]},{"path":[4,2,3,0,2,1],"span":[151,4,27],"trailingComments":" Exclusive.\n"},{"path":[4,2,3,0,2,1,4],"span":[151,4,12]},{"path":[4,2,3,0,2,1,5],"span":[151,13,18]},{"path":[4,2,3,0,2,1,1],"span":[151,19,22]},{"path":[4,2,3,0,2,1,3],"span":[151,25,26]},{"path":[4,2,3,0,2,2],"span":[153,4,47]},{"path":[4,2,3,0,2,2,4],"span":[153,4,12]},{"path":[4,2,3,0,2,2,6],"span":[153,13,34]},{"path":[4,2,3,0,2,2,1],"span":[153,35,42]},{"path":[4,2,3,0,2,2,3],"span":[153,45,46]},{"path":[4,2,2,5],"span":[155,2,46]},{"path":[4,2,2,5,4],"span":[155,2,10]},{"path":[4,2,2,5,6],"span":[155,11,25]},{"path":[4,2,2,5,1],"span":[155,26,41]},{"path":[4,2,2,5,3],"span":[155,44,45]},{"path":[4,2,2,6],"span":[157,2,47]},{"path":[4,2,2,6,4],"span":[157,2,10]},{"path":[4,2,2,6,6],"span":[157,11,31]},{"path":[4,2,2,6,1],"span":[157,32,42]},{"path":[4,2,2,6,3],"span":[157,45,46]},{"path":[4,2,2,7],"span":[159,2,38]},{"path":[4,2,2,7,4],"span":[159,2,10]},{"path":[4,2,2,7,6],"span":[159,11,25]},{"path":[4,2,2,7,1],"span":[159,26,33]},{"path":[4,2,2,7,3],"span":[159,36,37]},{"path":[4,2,3,1],"span":[164,2,167,3],"leadingComments":" Range of reserved tag numbers. Reserved tag numbers may not be used by\n fields or extension ranges in the same message. Reserved ranges may\n not overlap.\n"},{"path":[4,2,3,1,1],"span":[164,10,23]},{"path":[4,2,3,1,2,0],"span":[165,4,29],"trailingComments":" Inclusive.\n"},{"path":[4,2,3,1,2,0,4],"span":[165,4,12]},{"path":[4,2,3,1,2,0,5],"span":[165,13,18]},{"path":[4,2,3,1,2,0,1],"span":[165,19,24]},{"path":[4,2,3,1,2,0,3],"span":[165,27,28]},{"path":[4,2,3,1,2,1],"span":[166,4,27],"trailingComments":" Exclusive.\n"},{"path":[4,2,3,1,2,1,4],"span":[166,4,12]},{"path":[4,2,3,1,2,1,5],"span":[166,13,18]},{"path":[4,2,3,1,2,1,1],"span":[166,19,22]},{"path":[4,2,3,1,2,1,3],"span":[166,25,26]},{"path":[4,2,2,8],"span":[168,2,44]},{"path":[4,2,2,8,4],"span":[168,2,10]},{"path":[4,2,2,8,6],"span":[168,11,24]},{"path":[4,2,2,8,1],"span":[168,25,39]},{"path":[4,2,2,8,3],"span":[168,42,43]},{"path":[4,2,2,9],"span":[171,2,37],"leadingComments":" Reserved field names, which may not be used by fields in the same message.\n A given name may only be reserved once.\n"},{"path":[4,2,2,9,4],"span":[171,2,10]},{"path":[4,2,2,9,5],"span":[171,11,17]},{"path":[4,2,2,9,1],"span":[171,18,31]},{"path":[4,2,2,9,3],"span":[171,34,36]},{"path":[4,3],"span":[174,0,226,1]},{"path":[4,3,1],"span":[174,8,29]},{"path":[4,3,2,0],"span":[176,2,58],"leadingComments":" The parser stores options it doesn't recognize here. See above.\n"},{"path":[4,3,2,0,4],"span":[176,2,10]},{"path":[4,3,2,0,6],"span":[176,11,30]},{"path":[4,3,2,0,1],"span":[176,31,51]},{"path":[4,3,2,0,3],"span":[176,54,57]},{"path":[4,3,3,0],"span":[178,2,201,3]},{"path":[4,3,3,0,1],"span":[178,10,21]},{"path":[4,3,3,0,2,0],"span":[180,4,30],"leadingComments":" The extension number declared within the extension range.\n"},{"path":[4,3,3,0,2,0,4],"span":[180,4,12]},{"path":[4,3,3,0,2,0,5],"span":[180,13,18]},{"path":[4,3,3,0,2,0,1],"span":[180,19,25]},{"path":[4,3,3,0,2,0,3],"span":[180,28,29]},{"path":[4,3,3,0,2,1],"span":[184,4,34],"leadingComments":" The fully-qualified name of the extension field. There must be a leading\n dot in front of the full name.\n"},{"path":[4,3,3,0,2,1,4],"span":[184,4,12]},{"path":[4,3,3,0,2,1,5],"span":[184,13,19]},{"path":[4,3,3,0,2,1,1],"span":[184,20,29]},{"path":[4,3,3,0,2,1,3],"span":[184,32,33]},{"path":[4,3,3,0,2,2],"span":[189,4,29],"leadingComments":" The fully-qualified type name of the extension field. Unlike\n Metadata.type, Declaration.type must have a leading dot for messages\n and enums.\n"},{"path":[4,3,3,0,2,2,4],"span":[189,4,12]},{"path":[4,3,3,0,2,2,5],"span":[189,13,19]},{"path":[4,3,3,0,2,2,1],"span":[189,20,24]},{"path":[4,3,3,0,2,2,3],"span":[189,27,28]},{"path":[4,3,3,0,2,3],"span":[194,4,31],"leadingComments":" If true, indicates that the number is reserved in the extension range,\n and any extension field with the number will fail to compile. Set this\n when a declared extension field is deleted.\n"},{"path":[4,3,3,0,2,3,4],"span":[194,4,12]},{"path":[4,3,3,0,2,3,5],"span":[194,13,17]},{"path":[4,3,3,0,2,3,1],"span":[194,18,26]},{"path":[4,3,3,0,2,3,3],"span":[194,29,30]},{"path":[4,3,3,0,2,4],"span":[198,4,31],"leadingComments":" If true, indicates that the extension must be defined as repeated.\n Otherwise the extension must be defined as optional.\n"},{"path":[4,3,3,0,2,4,4],"span":[198,4,12]},{"path":[4,3,3,0,2,4,5],"span":[198,13,17]},{"path":[4,3,3,0,2,4,1],"span":[198,18,26]},{"path":[4,3,3,0,2,4,3],"span":[198,29,30]},{"path":[4,3,3,0,9],"span":[200,4,15],"trailingComments":" removed is_repeated\n"},{"path":[4,3,3,0,9,0],"span":[200,13,14]},{"path":[4,3,3,0,9,0,1],"span":[200,13,14]},{"path":[4,3,3,0,9,0,2],"span":[200,13,14]},{"path":[4,3,2,1],"span":[206,2,70],"leadingComments":" For external users: DO NOT USE. We are in the process of open sourcing\n extension declaration and executing internal cleanups before it can be\n used externally.\n"},{"path":[4,3,2,1,4],"span":[206,2,10]},{"path":[4,3,2,1,6],"span":[206,11,22]},{"path":[4,3,2,1,1],"span":[206,23,34]},{"path":[4,3,2,1,3],"span":[206,37,38]},{"path":[4,3,2,1,8],"span":[206,39,69]},{"path":[4,3,2,1,8,17],"span":[206,40,68]},{"path":[4,3,2,2],"span":[209,2,36],"leadingComments":" Any features defined in the specific edition.\n"},{"path":[4,3,2,2,4],"span":[209,2,10]},{"path":[4,3,2,2,6],"span":[209,11,21]},{"path":[4,3,2,2,1],"span":[209,22,30]},{"path":[4,3,2,2,3],"span":[209,33,35]},{"path":[4,3,4,0],"span":[212,2,216,3],"leadingComments":" The verification state of the extension range.\n"},{"path":[4,3,4,0,1],"span":[212,7,24]},{"path":[4,3,4,0,2,0],"span":[214,4,20],"leadingComments":" All the extensions of the range must be declared.\n"},{"path":[4,3,4,0,2,0,1],"span":[214,4,15]},{"path":[4,3,4,0,2,0,2],"span":[214,18,19]},{"path":[4,3,4,0,2,1],"span":[215,4,19]},{"path":[4,3,4,0,2,1,1],"span":[215,4,14]},{"path":[4,3,4,0,2,1,2],"span":[215,17,18]},{"path":[4,3,2,3],"span":[221,2,222,59],"leadingComments":" The verification state of the range.\n TODO: flip the default to DECLARATION once all empty ranges\n are marked as UNVERIFIED.\n"},{"path":[4,3,2,3,4],"span":[221,2,10]},{"path":[4,3,2,3,6],"span":[221,11,28]},{"path":[4,3,2,3,1],"span":[221,29,41]},{"path":[4,3,2,3,3],"span":[221,44,45]},{"path":[4,3,2,3,8],"span":[222,6,58]},{"path":[4,3,2,3,7],"span":[222,7,27]},{"path":[4,3,2,3,8,17],"span":[222,29,57]},{"path":[4,3,5],"span":[225,2,25],"leadingComments":" Clients can define custom options in extensions of this message. See above.\n"},{"path":[4,3,5,0],"span":[225,13,24]},{"path":[4,3,5,0,1],"span":[225,13,17]},{"path":[4,3,5,0,2],"span":[225,21,24]},{"path":[4,4],"span":[229,0,333,1],"leadingComments":" Describes a field within a message.\n"},{"path":[4,4,1],"span":[229,8,28]},{"path":[4,4,4,0],"span":[230,2,262,3]},{"path":[4,4,4,0,1],"span":[230,7,11]},{"path":[4,4,4,0,2,0],"span":[233,4,20],"leadingComments":" 0 is reserved for errors.\n Order is weird for historical reasons.\n"},{"path":[4,4,4,0,2,0,1],"span":[233,4,15]},{"path":[4,4,4,0,2,0,2],"span":[233,18,19]},{"path":[4,4,4,0,2,1],"span":[234,4,19]},{"path":[4,4,4,0,2,1,1],"span":[234,4,14]},{"path":[4,4,4,0,2,1,2],"span":[234,17,18]},{"path":[4,4,4,0,2,2],"span":[237,4,19],"leadingComments":" Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n negative values are likely.\n"},{"path":[4,4,4,0,2,2,1],"span":[237,4,14]},{"path":[4,4,4,0,2,2,2],"span":[237,17,18]},{"path":[4,4,4,0,2,3],"span":[238,4,20]},{"path":[4,4,4,0,2,3,1],"span":[238,4,15]},{"path":[4,4,4,0,2,3,2],"span":[238,18,19]},{"path":[4,4,4,0,2,4],"span":[241,4,19],"leadingComments":" Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n negative values are likely.\n"},{"path":[4,4,4,0,2,4,1],"span":[241,4,14]},{"path":[4,4,4,0,2,4,2],"span":[241,17,18]},{"path":[4,4,4,0,2,5],"span":[242,4,21]},{"path":[4,4,4,0,2,5,1],"span":[242,4,16]},{"path":[4,4,4,0,2,5,2],"span":[242,19,20]},{"path":[4,4,4,0,2,6],"span":[243,4,21]},{"path":[4,4,4,0,2,6,1],"span":[243,4,16]},{"path":[4,4,4,0,2,6,2],"span":[243,19,20]},{"path":[4,4,4,0,2,7],"span":[244,4,18]},{"path":[4,4,4,0,2,7,1],"span":[244,4,13]},{"path":[4,4,4,0,2,7,2],"span":[244,16,17]},{"path":[4,4,4,0,2,8],"span":[245,4,20]},{"path":[4,4,4,0,2,8,1],"span":[245,4,15]},{"path":[4,4,4,0,2,8,2],"span":[245,18,19]},{"path":[4,4,4,0,2,9],"span":[251,4,20],"leadingComments":" Tag-delimited aggregate.\n Group type is deprecated and not supported after google.protobuf. However, Proto3\n implementations should still be able to parse the group wire format and\n treat group fields as unknown fields.  In Editions, the group wire format\n can be enabled via the `message_encoding` feature.\n"},{"path":[4,4,4,0,2,9,1],"span":[251,4,14]},{"path":[4,4,4,0,2,9,2],"span":[251,17,19]},{"path":[4,4,4,0,2,10],"span":[252,4,22],"trailingComments":" Length-delimited aggregate.\n"},{"path":[4,4,4,0,2,10,1],"span":[252,4,16]},{"path":[4,4,4,0,2,10,2],"span":[252,19,21]},{"path":[4,4,4,0,2,11],"span":[255,4,20],"leadingComments":" New in version 2.\n"},{"path":[4,4,4,0,2,11,1],"span":[255,4,14]},{"path":[4,4,4,0,2,11,2],"span":[255,17,19]},{"path":[4,4,4,0,2,12],"span":[256,4,21]},{"path":[4,4,4,0,2,12,1],"span":[256,4,15]},{"path":[4,4,4,0,2,12,2],"span":[256,18,20]},{"path":[4,4,4,0,2,13],"span":[257,4,19]},{"path":[4,4,4,0,2,13,1],"span":[257,4,13]},{"path":[4,4,4,0,2,13,2],"span":[257,16,18]},{"path":[4,4,4,0,2,14],"span":[258,4,23]},{"path":[4,4,4,0,2,14,1],"span":[258,4,17]},{"path":[4,4,4,0,2,14,2],"span":[258,20,22]},{"path":[4,4,4,0,2,15],"span":[259,4,23]},{"path":[4,4,4,0,2,15,1],"span":[259,4,17]},{"path":[4,4,4,0,2,15,2],"span":[259,20,22]},{"path":[4,4,4,0,2,16],"span":[260,4,21],"trailingComments":" Uses ZigZag encoding.\n"},{"path":[4,4,4,0,2,16,1],"span":[260,4,15]},{"path":[4,4,4,0,2,16,2],"span":[260,18,20]},{"path":[4,4,4,0,2,17],"span":[261,4,21],"trailingComments":" Uses ZigZag encoding.\n"},{"path":[4,4,4,0,2,17,1],"span":[261,4,15]},{"path":[4,4,4,0,2,17,2],"span":[261,18,20]},{"path":[4,4,4,1],"span":[264,2,272,3]},{"path":[4,4,4,1,1],"span":[264,7,12]},{"path":[4,4,4,1,2,0],"span":[266,4,23],"leadingComments":" 0 is reserved for errors\n"},{"path":[4,4,4,1,2,0,1],"span":[266,4,18]},{"path":[4,4,4,1,2,0,2],"span":[266,21,22]},{"path":[4,4,4,1,2,1],"span":[267,4,23]},{"path":[4,4,4,1,2,1,1],"span":[267,4,18]},{"path":[4,4,4,1,2,1,2],"span":[267,21,22]},{"path":[4,4,4,1,2,2],"span":[271,4,23],"leadingComments":" The required label is only allowed in google.protobuf.  In proto3 and Editions\n it's explicitly prohibited.  In Editions, the `field_presence` feature\n can be used to get this behavior.\n"},{"path":[4,4,4,1,2,2,1],"span":[271,4,18]},{"path":[4,4,4,1,2,2,2],"span":[271,21,22]},{"path":[4,4,2,0],"span":[274,2,27]},{"path":[4,4,2,0,4],"span":[274,2,10]},{"path":[4,4,2,0,5],"span":[274,11,17]},{"path":[4,4,2,0,1],"span":[274,18,22]},{"path":[4,4,2,0,3],"span":[274,25,26]},{"path":[4,4,2,1],"span":[275,2,28]},{"path":[4,4,2,1,4],"span":[275,2,10]},{"path":[4,4,2,1,5],"span":[275,11,16]},{"path":[4,4,2,1,1],"span":[275,17,23]},{"path":[4,4,2,1,3],"span":[275,26,27]},{"path":[4,4,2,2],"span":[276,2,27]},{"path":[4,4,2,2,4],"span":[276,2,10]},{"path":[4,4,2,2,6],"span":[276,11,16]},{"path":[4,4,2,2,1],"span":[276,17,22]},{"path":[4,4,2,2,3],"span":[276,25,26]},{"path":[4,4,2,3],"span":[280,2,25],"leadingComments":" If type_name is set, this need not be set.  If both this and type_name\n are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.\n"},{"path":[4,4,2,3,4],"span":[280,2,10]},{"path":[4,4,2,3,6],"span":[280,11,15]},{"path":[4,4,2,3,1],"span":[280,16,20]},{"path":[4,4,2,3,3],"span":[280,23,24]},{"path":[4,4,2,4],"span":[287,2,32],"leadingComments":" For message and enum types, this is the name of the type.  If the name\n starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping\n rules are used to find the type (i.e. first the nested types within this\n message are searched, then within the parent, on up to the root\n namespace).\n"},{"path":[4,4,2,4,4],"span":[287,2,10]},{"path":[4,4,2,4,5],"span":[287,11,17]},{"path":[4,4,2,4,1],"span":[287,18,27]},{"path":[4,4,2,4,3],"span":[287,30,31]},{"path":[4,4,2,5],"span":[291,2,31],"leadingComments":" For extensions, this is the name of the type being extended.  It is\n resolved in the same manner as type_name.\n"},{"path":[4,4,2,5,4],"span":[291,2,10]},{"path":[4,4,2,5,5],"span":[291,11,17]},{"path":[4,4,2,5,1],"span":[291,18,26]},{"path":[4,4,2,5,3],"span":[291,29,30]},{"path":[4,4,2,6],"span":[297,2,36],"leadingComments":" For numeric types, contains the original text representation of the value.\n For booleans, \"true\" or \"false\".\n For strings, contains the default text contents (not escaped in any way).\n For bytes, contains the C escaped value.  All bytes >= 128 are escaped.\n"},{"path":[4,4,2,6,4],"span":[297,2,10]},{"path":[4,4,2,6,5],"span":[297,11,17]},{"path":[4,4,2,6,1],"span":[297,18,31]},{"path":[4,4,2,6,3],"span":[297,34,35]},{"path":[4,4,2,7],"span":[301,2,33],"leadingComments":" If set, gives the index of a oneof in the containing type's oneof_decl\n list.  This field is a member of that oneof.\n"},{"path":[4,4,2,7,4],"span":[301,2,10]},{"path":[4,4,2,7,5],"span":[301,11,16]},{"path":[4,4,2,7,1],"span":[301,17,28]},{"path":[4,4,2,7,3],"span":[301,31,32]},{"path":[4,4,2,8],"span":[307,2,33],"leadingComments":" JSON name of this field. The value is set by protocol compiler. If the\n user has set a \"json_name\" option on this field, that option's value\n will be used. Otherwise, it's deduced from the field's name by converting\n it to camelCase.\n"},{"path":[4,4,2,8,4],"span":[307,2,10]},{"path":[4,4,2,8,5],"span":[307,11,17]},{"path":[4,4,2,8,1],"span":[307,18,27]},{"path":[4,4,2,8,3],"span":[307,30,32]},{"path":[4,4,2,9],"span":[309,2,36]},{"path":[4,4,2,9,4],"span":[309,2,10]},{"path":[4,4,2,9,6],"span":[309,11,23]},{"path":[4,4,2,9,1],"span":[309,24,31]},{"path":[4,4,2,9,3],"span":[309,34,35]},{"path":[4,4,2,10],"span":[332,2,37],"leadingComments":" If true, this is a proto3 \"optional\". When a proto3 field is optional, it\n tracks presence regardless of field type.\n\n When proto3_optional is true, this field must belong to a oneof to signal\n to old proto3 clients that presence is tracked for this field. This oneof\n is known as a \"synthetic\" oneof, and this field must be its sole member\n (each proto3 optional field gets its own synthetic oneof). Synthetic oneofs\n exist in the descriptor only, and do not generate any API. Synthetic oneofs\n must be ordered after all \"real\" oneofs.\n\n For message fields, proto3_optional doesn't create any semantic change,\n since non-repeated message fields always track presence. However it still\n indicates the semantic detail of whether the user wrote \"optional\" or not.\n This can be useful for round-tripping the .proto file. For consistency we\n give message fields a synthetic oneof also, even though it is not required\n to track presence. This is especially important because the parser can't\n tell if a field is a message or an enum, so it must always create a\n synthetic oneof.\n\n Proto2 optional fields do not set this flag, because they already indicate\n optional with `LABEL_OPTIONAL`.\n"},{"path":[4,4,2,10,4],"span":[332,2,10]},{"path":[4,4,2,10,5],"span":[332,11,15]},{"path":[4,4,2,10,1],"span":[332,16,31]},{"path":[4,4,2,10,3],"span":[332,34,36]},{"path":[4,5],"span":[336,0,339,1],"leadingComments":" Describes a oneof.\n"},{"path":[4,5,1],"span":[336,8,28]},{"path":[4,5,2,0],"span":[337,2,27]},{"path":[4,5,2,0,4],"span":[337,2,10]},{"path":[4,5,2,0,5],"span":[337,11,17]},{"path":[4,5,2,0,1],"span":[337,18,22]},{"path":[4,5,2,0,3],"span":[337,25,26]},{"path":[4,5,2,1],"span":[338,2,36]},{"path":[4,5,2,1,4],"span":[338,2,10]},{"path":[4,5,2,1,6],"span":[338,11,23]},{"path":[4,5,2,1,1],"span":[338,24,31]},{"path":[4,5,2,1,3],"span":[338,34,35]},{"path":[4,6],"span":[342,0,368,1],"leadingComments":" Describes an enum type.\n"},{"path":[4,6,1],"span":[342,8,27]},{"path":[4,6,2,0],"span":[343,2,27]},{"path":[4,6,2,0,4],"span":[343,2,10]},{"path":[4,6,2,0,5],"span":[343,11,17]},{"path":[4,6,2,0,1],"span":[343,18,22]},{"path":[4,6,2,0,3],"span":[343,25,26]},{"path":[4,6,2,1],"span":[345,2,46]},{"path":[4,6,2,1,4],"span":[345,2,10]},{"path":[4,6,2,1,6],"span":[345,11,35]},{"path":[4,6,2,1,1],"span":[345,36,41]},{"path":[4,6,2,1,3],"span":[345,44,45]},{"path":[4,6,2,2],"span":[347,2,35]},{"path":[4,6,2,2,4],"span":[347,2,10]},{"path":[4,6,2,2,6],"span":[347,11,22]},{"path":[4,6,2,2,1],"span":[347,23,30]},{"path":[4,6,2,2,3],"span":[347,33,34]},{"path":[4,6,3,0],"span":[355,2,358,3],"leadingComments":" Range of reserved numeric values. Reserved values may not be used by\n entries in the same enum. Reserved ranges may not overlap.\n\n Note that this is distinct from DescriptorProto.ReservedRange in that it\n is inclusive such that it can appropriately represent the entire int32\n domain.\n"},{"path":[4,6,3,0,1],"span":[355,10,27]},{"path":[4,6,3,0,2,0],"span":[356,4,29],"trailingComments":" Inclusive.\n"},{"path":[4,6,3,0,2,0,4],"span":[356,4,12]},{"path":[4,6,3,0,2,0,5],"span":[356,13,18]},{"path":[4,6,3,0,2,0,1],"span":[356,19,24]},{"path":[4,6,3,0,2,0,3],"span":[356,27,28]},{"path":[4,6,3,0,2,1],"span":[357,4,27],"trailingComments":" Inclusive.\n"},{"path":[4,6,3,0,2,1,4],"span":[357,4,12]},{"path":[4,6,3,0,2,1,5],"span":[357,13,18]},{"path":[4,6,3,0,2,1,1],"span":[357,19,22]},{"path":[4,6,3,0,2,1,3],"span":[357,25,26]},{"path":[4,6,2,3],"span":[363,2,48],"leadingComments":" Range of reserved numeric values. Reserved numeric values may not be used\n by enum values in the same enum declaration. Reserved ranges may not\n overlap.\n"},{"path":[4,6,2,3,4],"span":[363,2,10]},{"path":[4,6,2,3,6],"span":[363,11,28]},{"path":[4,6,2,3,1],"span":[363,29,43]},{"path":[4,6,2,3,3],"span":[363,46,47]},{"path":[4,6,2,4],"span":[367,2,36],"leadingComments":" Reserved enum value names, which may not be reused. A given name may only\n be reserved once.\n"},{"path":[4,6,2,4,4],"span":[367,2,10]},{"path":[4,6,2,4,5],"span":[367,11,17]},{"path":[4,6,2,4,1],"span":[367,18,31]},{"path":[4,6,2,4,3],"span":[367,34,35]},{"path":[4,7],"span":[371,0,376,1],"leadingComments":" Describes a value within an enum.\n"},{"path":[4,7,1],"span":[371,8,32]},{"path":[4,7,2,0],"span":[372,2,27]},{"path":[4,7,2,0,4],"span":[372,2,10]},{"path":[4,7,2,0,5],"span":[372,11,17]},{"path":[4,7,2,0,1],"span":[372,18,22]},{"path":[4,7,2,0,3],"span":[372,25,26]},{"path":[4,7,2,1],"span":[373,2,28]},{"path":[4,7,2,1,4],"span":[373,2,10]},{"path":[4,7,2,1,5],"span":[373,11,16]},{"path":[4,7,2,1,1],"span":[373,17,23]},{"path":[4,7,2,1,3],"span":[373,26,27]},{"path":[4,7,2,2],"span":[375,2,40]},{"path":[4,7,2,2,4],"span":[375,2,10]},{"path":[4,7,2,2,6],"span":[375,11,27]},{"path":[4,7,2,2,1],"span":[375,28,35]},{"path":[4,7,2,2,3],"span":[375,38,39]},{"path":[4,8],"span":[379,0,384,1],"leadingComments":" Describes a service.\n"},{"path":[4,8,1],"span":[379,8,30]},{"path":[4,8,2,0],"span":[380,2,27]},{"path":[4,8,2,0,4],"span":[380,2,10]},{"path":[4,8,2,0,5],"span":[380,11,17]},{"path":[4,8,2,0,1],"span":[380,18,22]},{"path":[4,8,2,0,3],"span":[380,25,26]},{"path":[4,8,2,1],"span":[381,2,44]},{"path":[4,8,2,1,4],"span":[381,2,10]},{"path":[4,8,2,1,6],"span":[381,11,32]},{"path":[4,8,2,1,1],"span":[381,33,39]},{"path":[4,8,2,1,3],"span":[381,42,43]},{"path":[4,8,2,2],"span":[383,2,38]},{"path":[4,8,2,2,4],"span":[383,2,10]},{"path":[4,8,2,2,6],"span":[383,11,25]},{"path":[4,8,2,2,1],"span":[383,26,33]},{"path":[4,8,2,2,3],"span":[383,36,37]},{"path":[4,9],"span":[387,0,401,1],"leadingComments":" Describes a method of a service.\n"},{"path":[4,9,1],"span":[387,8,29]},{"path":[4,9,2,0],"span":[388,2,27]},{"path":[4,9,2,0,4],"span":[388,2,10]},{"path":[4,9,2,0,5],"span":[388,11,17]},{"path":[4,9,2,0,1],"span":[388,18,22]},{"path":[4,9,2,0,3],"span":[388,25,26]},{"path":[4,9,2,1],"span":[392,2,33],"leadingComments":" Input and output type names.  These are resolved in the same way as\n FieldDescriptorProto.type_name, but must refer to a message type.\n"},{"path":[4,9,2,1,4],"span":[392,2,10]},{"path":[4,9,2,1,5],"span":[392,11,17]},{"path":[4,9,2,1,1],"span":[392,18,28]},{"path":[4,9,2,1,3],"span":[392,31,32]},{"path":[4,9,2,2],"span":[393,2,34]},{"path":[4,9,2,2,4],"span":[393,2,10]},{"path":[4,9,2,2,5],"span":[393,11,17]},{"path":[4,9,2,2,1],"span":[393,18,29]},{"path":[4,9,2,2,3],"span":[393,32,33]},{"path":[4,9,2,3],"span":[395,2,37]},{"path":[4,9,2,3,4],"span":[395,2,10]},{"path":[4,9,2,3,6],"span":[395,11,24]},{"path":[4,9,2,3,1],"span":[395,25,32]},{"path":[4,9,2,3,3],"span":[395,35,36]},{"path":[4,9,2,4],"span":[398,2,55],"leadingComments":" Identifies if client streams multiple client messages\n"},{"path":[4,9,2,4,4],"span":[398,2,10]},{"path":[4,9,2,4,5],"span":[398,11,15]},{"path":[4,9,2,4,1],"span":[398,16,32]},{"path":[4,9,2,4,3],"span":[398,35,36]},{"path":[4,9,2,4,8],"span":[398,37,54]},{"path":[4,9,2,4,7],"span":[398,38,53]},{"path":[4,9,2,5],"span":[400,2,55],"leadingComments":" Identifies if server streams multiple server messages\n"},{"path":[4,9,2,5,4],"span":[400,2,10]},{"path":[4,9,2,5,5],"span":[400,11,15]},{"path":[4,9,2,5,1],"span":[400,16,32]},{"path":[4,9,2,5,3],"span":[400,35,36]},{"path":[4,9,2,5,8],"span":[400,37,54]},{"path":[4,9,2,5,7],"span":[400,38,53]},{"path":[4,10],"span":[435,0,559,1],"leadingDetachedComments":[" ===================================================================\n Options\n"," Each of the definitions above may have \"options\" attached.  These are\n just annotations which may cause code to be generated slightly differently\n or may contain hints for code that manipulates protocol messages.\n\n Clients may define custom options as extensions of the *Options messages.\n These extensions may not yet be known at parsing time, so the parser cannot\n store the values in them.  Instead it stores them in a field in the *Options\n message called uninterpreted_option. This field must have the same name\n across all *Options messages. We then use this field to populate the\n extensions when we build a descriptor, at which point all protos have been\n parsed and so all extensions are known.\n\n Extension numbers for custom options may be chosen as follows:\n * For options which will only be used within a single application or\n   organization, or for experimental options, use field numbers 50000\n   through 99999.  It is up to you to ensure that you do not use the\n   same number for multiple options.\n * For options which will be published and used publicly by multiple\n   independent entities, e-mail protobuf-global-extension-registry@google.com\n   to reserve extension numbers. Simply provide your project name (e.g.\n   Objective-C plugin) and your project website (if available) -- there's no\n   need to explain how you intend to use them. Usually you only need one\n   extension number. You can declare multiple options with only one extension\n   number by putting them in a sub-message. See the Custom Options section of\n   the docs for examples:\n   https://developers.google.com/protocol-buffers/docs/proto#options\n   If this turns out to be popular, a web service will be set up\n   to automatically assign option numbers.\n"]},{"path":[4,10,1],"span":[435,8,19]},{"path":[4,10,2,0],"span":[441,2,35],"leadingComments":" Sets the Java package where classes generated from this .proto will be\n placed.  By default, the proto package is used, but this is often\n inappropriate because proto packages do not normally start with backwards\n domain names.\n"},{"path":[4,10,2,0,4],"span":[441,2,10]},{"path":[4,10,2,0,5],"span":[441,11,17]},{"path":[4,10,2,0,1],"span":[441,18,30]},{"path":[4,10,2,0,3],"span":[441,33,34]},{"path":[4,10,2,1],"span":[448,2,43],"leadingComments":" Controls the name of the wrapper Java class generated for the .proto file.\n That class will always contain the .proto file's getDescriptor() method as\n well as any top-level extensions defined in the .proto file.\n If java_multiple_files is disabled, then all the other classes from the\n .proto file will be nested inside the single wrapper outer class.\n"},{"path":[4,10,2,1,4],"span":[448,2,10]},{"path":[4,10,2,1,5],"span":[448,11,17]},{"path":[4,10,2,1,1],"span":[448,18,38]},{"path":[4,10,2,1,3],"span":[448,41,42]},{"path":[4,10,2,2],"span":[456,2,59],"leadingComments":" If enabled, then the Java code generator will generate a separate .java\n file for each top-level message, enum, and service defined in the .proto\n file.  Thus, these types will *not* be nested inside the wrapper class\n named by java_outer_classname.  However, the wrapper class will still be\n generated to contain the file's getDescriptor() method as well as any\n top-level extensions defined in the file.\n"},{"path":[4,10,2,2,4],"span":[456,2,10]},{"path":[4,10,2,2,5],"span":[456,11,15]},{"path":[4,10,2,2,1],"span":[456,16,35]},{"path":[4,10,2,2,3],"span":[456,38,40]},{"path":[4,10,2,2,8],"span":[456,41,58]},{"path":[4,10,2,2,7],"span":[456,42,57]},{"path":[4,10,2,3],"span":[459,2,69],"leadingComments":" This option does nothing.\n"},{"path":[4,10,2,3,4],"span":[459,2,10]},{"path":[4,10,2,3,5],"span":[459,11,15]},{"path":[4,10,2,3,1],"span":[459,16,45]},{"path":[4,10,2,3,3],"span":[459,48,50]},{"path":[4,10,2,3,8],"span":[459,51,68]},{"path":[4,10,2,3,8,3],"span":[459,52,67]},{"path":[4,10,2,4],"span":[471,2,62],"leadingComments":" A proto2 file can set this to true to opt in to UTF-8 checking for Java,\n which will throw an exception if invalid UTF-8 is parsed from the wire or\n assigned to a string field.\n\n TODO: clarify exactly what kinds of field types this option\n applies to, and update these docs accordingly.\n\n Proto3 files already perform these checks. Setting the option explicitly to\n false has no effect: it cannot be used to opt proto3 files out of UTF-8\n checks.\n"},{"path":[4,10,2,4,4],"span":[471,2,10]},{"path":[4,10,2,4,5],"span":[471,11,15]},{"path":[4,10,2,4,1],"span":[471,16,38]},{"path":[4,10,2,4,3],"span":[471,41,43]},{"path":[4,10,2,4,8],"span":[471,44,61]},{"path":[4,10,2,4,7],"span":[471,45,60]},{"path":[4,10,4,0],"span":[474,2,479,3],"leadingComments":" Generated classes can be optimized for speed or code size.\n"},{"path":[4,10,4,0,1],"span":[474,7,19]},{"path":[4,10,4,0,2,0],"span":[475,4,14],"trailingComments":" Generate complete code for parsing, serialization,\n"},{"path":[4,10,4,0,2,0,1],"span":[475,4,9]},{"path":[4,10,4,0,2,0,2],"span":[475,12,13]},{"path":[4,10,4,0,2,1],"span":[477,4,18],"leadingComments":" etc.\n","trailingComments":" Use ReflectionOps to implement these methods.\n"},{"path":[4,10,4,0,2,1,1],"span":[477,4,13]},{"path":[4,10,4,0,2,1,2],"span":[477,16,17]},{"path":[4,10,4,0,2,2],"span":[478,4,21],"trailingComments":" Generate code using MessageLite and the lite runtime.\n"},{"path":[4,10,4,0,2,2,1],"span":[478,4,16]},{"path":[4,10,4,0,2,2,2],"span":[478,19,20]},{"path":[4,10,2,5],"span":[480,2,59]},{"path":[4,10,2,5,4],"span":[480,2,10]},{"path":[4,10,2,5,6],"span":[480,11,23]},{"path":[4,10,2,5,1],"span":[480,24,36]},{"path":[4,10,2,5,3],"span":[480,39,40]},{"path":[4,10,2,5,8],"span":[480,41,58]},{"path":[4,10,2,5,7],"span":[480,42,57]},{"path":[4,10,2,6],"span":[487,2,34],"leadingComments":" Sets the Go package where structs generated from this .proto will be\n placed. If omitted, the Go package will be derived from the following:\n   - The basename of the package import path, if provided.\n   - Otherwise, the package statement in the .proto file, if present.\n   - Otherwise, the basename of the .proto file, without extension.\n"},{"path":[4,10,2,6,4],"span":[487,2,10]},{"path":[4,10,2,6,5],"span":[487,11,17]},{"path":[4,10,2,6,1],"span":[487,18,28]},{"path":[4,10,2,6,3],"span":[487,31,33]},{"path":[4,10,2,7],"span":[499,2,59],"leadingComments":" Should generic services be generated in each language?  \"Generic\" services\n are not specific to any particular RPC system.  They are generated by the\n main code generators in each language (without additional plugins).\n Generic services were the only kind of service generation supported by\n early versions of google.protobuf.\n\n Generic services are now considered deprecated in favor of using plugins\n that generate code specific to your particular RPC system.  Therefore,\n these default to false.  Old code which depends on generic services should\n explicitly set them to true.\n"},{"path":[4,10,2,7,4],"span":[499,2,10]},{"path":[4,10,2,7,5],"span":[499,11,15]},{"path":[4,10,2,7,1],"span":[499,16,35]},{"path":[4,10,2,7,3],"span":[499,38,40]},{"path":[4,10,2,7,8],"span":[499,41,58]},{"path":[4,10,2,7,7],"span":[499,42,57]},{"path":[4,10,2,8],"span":[500,2,61]},{"path":[4,10,2,8,4],"span":[500,2,10]},{"path":[4,10,2,8,5],"span":[500,11,15]},{"path":[4,10,2,8,1],"span":[500,16,37]},{"path":[4,10,2,8,3],"span":[500,40,42]},{"path":[4,10,2,8,8],"span":[500,43,60]},{"path":[4,10,2,8,7],"span":[500,44,59]},{"path":[4,10,2,9],"span":[501,2,59]},{"path":[4,10,2,9,4],"span":[501,2,10]},{"path":[4,10,2,9,5],"span":[501,11,15]},{"path":[4,10,2,9,1],"span":[501,16,35]},{"path":[4,10,2,9,3],"span":[501,38,40]},{"path":[4,10,2,9,8],"span":[501,41,58]},{"path":[4,10,2,9,7],"span":[501,42,57]},{"path":[4,10,9],"span":[502,2,14],"trailingComments":" removed php_generic_services\n"},{"path":[4,10,9,0],"span":[502,11,13]},{"path":[4,10,9,0,1],"span":[502,11,13]},{"path":[4,10,9,0,2],"span":[502,11,13]},{"path":[4,10,10],"span":[503,2,34]},{"path":[4,10,10,0],"span":[503,11,33]},{"path":[4,10,2,10],"span":[509,2,50],"leadingComments":" Is this file deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for everything in the file, or it will be completely ignored; in the very\n least, this is a formalization for deprecating files.\n"},{"path":[4,10,2,10,4],"span":[509,2,10]},{"path":[4,10,2,10,5],"span":[509,11,15]},{"path":[4,10,2,10,1],"span":[509,16,26]},{"path":[4,10,2,10,3],"span":[509,29,31]},{"path":[4,10,2,10,8],"span":[509,32,49]},{"path":[4,10,2,10,7],"span":[509,33,48]},{"path":[4,10,2,11],"span":[513,2,55],"leadingComments":" Enables the use of arenas for the proto messages in this file. This applies\n only to generated classes for C++.\n"},{"path":[4,10,2,11,4],"span":[513,2,10]},{"path":[4,10,2,11,5],"span":[513,11,15]},{"path":[4,10,2,11,1],"span":[513,16,32]},{"path":[4,10,2,11,3],"span":[513,35,37]},{"path":[4,10,2,11,8],"span":[513,38,54]},{"path":[4,10,2,11,7],"span":[513,39,53]},{"path":[4,10,2,12],"span":[517,2,41],"leadingComments":" Sets the objective c class prefix which is prepended to all objective c\n generated classes from this .proto. There is no default.\n"},{"path":[4,10,2,12,4],"span":[517,2,10]},{"path":[4,10,2,12,5],"span":[517,11,17]},{"path":[4,10,2,12,1],"span":[517,18,35]},{"path":[4,10,2,12,3],"span":[517,38,40]},{"path":[4,10,2,13],"span":[520,2,40],"leadingComments":" Namespace for generated classes; defaults to the package.\n"},{"path":[4,10,2,13,4],"span":[520,2,10]},{"path":[4,10,2,13,5],"span":[520,11,17]},{"path":[4,10,2,13,1],"span":[520,18,34]},{"path":[4,10,2,13,3],"span":[520,37,39]},{"path":[4,10,2,14],"span":[526,2,36],"leadingComments":" By default Swift generators will take the proto package and CamelCase it\n replacing '.' with underscore and use that to prefix the types/symbols\n defined. When this options is provided, they will use this value instead\n to prefix the types/symbols defined.\n"},{"path":[4,10,2,14,4],"span":[526,2,10]},{"path":[4,10,2,14,5],"span":[526,11,17]},{"path":[4,10,2,14,1],"span":[526,18,30]},{"path":[4,10,2,14,3],"span":[526,33,35]},{"path":[4,10,2,15],"span":[530,2,40],"leadingComments":" Sets the php class prefix which is prepended to all php generated classes\n from this .proto. Default is empty.\n"},{"path":[4,10,2,15,4],"span":[530,2,10]},{"path":[4,10,2,15,5],"span":[530,11,17]},{"path":[4,10,2,15,1],"span":[530,18,34]},{"path":[4,10,2,15,3],"span":[530,37,39]},{"path":[4,10,2,16],"span":[535,2,37],"leadingComments":" Use this option to change the namespace of php generated classes. Default\n is empty. When this option is empty, the package name will be used for\n determining the namespace.\n"},{"path":[4,10,2,16,4],"span":[535,2,10]},{"path":[4,10,2,16,5],"span":[535,11,17]},{"path":[4,10,2,16,1],"span":[535,18,31]},{"path":[4,10,2,16,3],"span":[535,34,36]},{"path":[4,10,2,17],"span":[540,2,46],"leadingComments":" Use this option to change the namespace of php generated metadata classes.\n Default is empty. When this option is empty, the proto file name will be\n used for determining the namespace.\n"},{"path":[4,10,2,17,4],"span":[540,2,10]},{"path":[4,10,2,17,5],"span":[540,11,17]},{"path":[4,10,2,17,1],"span":[540,18,40]},{"path":[4,10,2,17,3],"span":[540,43,45]},{"path":[4,10,2,18],"span":[545,2,36],"leadingComments":" Use this option to change the package of ruby generated classes. Default\n is empty. When this option is not set, the package name will be used for\n determining the ruby package.\n"},{"path":[4,10,2,18,4],"span":[545,2,10]},{"path":[4,10,2,18,5],"span":[545,11,17]},{"path":[4,10,2,18,1],"span":[545,18,30]},{"path":[4,10,2,18,3],"span":[545,33,35]},{"path":[4,10,2,19],"span":[548,2,36],"leadingComments":" Any features defined in the specific edition.\n"},{"path":[4,10,2,19,4],"span":[548,2,10]},{"path":[4,10,2,19,6],"span":[548,11,21]},{"path":[4,10,2,19,1],"span":[548,22,30]},{"path":[4,10,2,19,3],"span":[548,33,35]},{"path":[4,10,2,20],"span":[552,2,58],"leadingComments":" The parser stores options it doesn't recognize here.\n See the documentation for the \"Options\" section above.\n"},{"path":[4,10,2,20,4],"span":[552,2,10]},{"path":[4,10,2,20,6],"span":[552,11,30]},{"path":[4,10,2,20,1],"span":[552,31,51]},{"path":[4,10,2,20,3],"span":[552,54,57]},{"path":[4,10,5],"span":[556,2,25],"leadingComments":" Clients can define custom options in extensions of this message.\n See the documentation for the \"Options\" section above.\n"},{"path":[4,10,5,0],"span":[556,13,24]},{"path":[4,10,5,0,1],"span":[556,13,17]},{"path":[4,10,5,0,2],"span":[556,21,24]},{"path":[4,10,9],"span":[558,2,14]},{"path":[4,10,9,1],"span":[558,11,13]},{"path":[4,10,9,1,1],"span":[558,11,13]},{"path":[4,10,9,1,2],"span":[558,11,13]},{"path":[4,11],"span":[561,0,641,1]},{"path":[4,11,1],"span":[561,8,22]},{"path":[4,11,2,0],"span":[580,2,62],"leadingComments":" Set true to use the old proto1 MessageSet wire format for extensions.\n This is provided for backwards-compatibility with the MessageSet wire\n format.  You should not use this for any other reason:  It's less\n efficient, has fewer features, and is more complicated.\n\n The message must be defined exactly as follows:\n   message Foo {\n     option message_set_wire_format = true;\n     extensions 4 to max;\n   }\n Note that the message cannot have any defined fields; MessageSets only\n have extensions.\n\n All extensions of your type must be singular messages; e.g. they cannot\n be int32s, enums, or repeated messages.\n\n Because this is an option, the above two restrictions are not enforced by\n the protocol compiler.\n"},{"path":[4,11,2,0,4],"span":[580,2,10]},{"path":[4,11,2,0,5],"span":[580,11,15]},{"path":[4,11,2,0,1],"span":[580,16,39]},{"path":[4,11,2,0,3],"span":[580,42,43]},{"path":[4,11,2,0,8],"span":[580,44,61]},{"path":[4,11,2,0,7],"span":[580,45,60]},{"path":[4,11,2,1],"span":[585,2,70],"leadingComments":" Disables the generation of the standard \"descriptor()\" accessor, which can\n conflict with a field of the same name.  This is meant to make migration\n from proto1 easier; new code should avoid fields named \"descriptor\".\n"},{"path":[4,11,2,1,4],"span":[585,2,10]},{"path":[4,11,2,1,5],"span":[585,11,15]},{"path":[4,11,2,1,1],"span":[585,16,47]},{"path":[4,11,2,1,3],"span":[585,50,51]},{"path":[4,11,2,1,8],"span":[585,52,69]},{"path":[4,11,2,1,7],"span":[585,53,68]},{"path":[4,11,2,2],"span":[591,2,49],"leadingComments":" Is this message deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the message, or it will be completely ignored; in the very least,\n this is a formalization for deprecating messages.\n"},{"path":[4,11,2,2,4],"span":[591,2,10]},{"path":[4,11,2,2,5],"span":[591,11,15]},{"path":[4,11,2,2,1],"span":[591,16,26]},{"path":[4,11,2,2,3],"span":[591,29,30]},{"path":[4,11,2,2,8],"span":[591,31,48]},{"path":[4,11,2,2,7],"span":[591,32,47]},{"path":[4,11,9],"span":[593,2,19]},{"path":[4,11,9,0],"span":[593,11,12]},{"path":[4,11,9,0,1],"span":[593,11,12]},{"path":[4,11,9,0,2],"span":[593,11,12]},{"path":[4,11,9,1],"span":[593,14,15]},{"path":[4,11,9,1,1],"span":[593,14,15]},{"path":[4,11,9,1,2],"span":[593,14,15]},{"path":[4,11,9,2],"span":[593,17,18]},{"path":[4,11,9,2,1],"span":[593,17,18]},{"path":[4,11,9,2,2],"span":[593,17,18]},{"path":[4,11,2,3],"span":[616,2,30],"leadingComments":" Whether the message is an automatically generated map entry type for the\n maps field.\n\n For maps fields:\n     map<KeyType, ValueType> map_field = 1;\n The parsed descriptor looks like:\n     message MapFieldEntry {\n         option map_entry = true;\n         optional KeyType key = 1;\n         optional ValueType value = 2;\n     }\n     repeated MapFieldEntry map_field = 1;\n\n Implementations may choose not to generate the map_entry=true message, but\n use a native map in the target language to hold the keys and values.\n The reflection APIs in such implementations still need to work as\n if the field is a repeated message field.\n\n NOTE: Do not set the option in .proto files. Always use the maps syntax\n instead. The option should only be implicitly set by the proto compiler\n parser.\n"},{"path":[4,11,2,3,4],"span":[616,2,10]},{"path":[4,11,2,3,5],"span":[616,11,15]},{"path":[4,11,2,3,1],"span":[616,16,25]},{"path":[4,11,2,3,3],"span":[616,28,29]},{"path":[4,11,9],"span":[618,2,13],"trailingComments":" javalite_serializable\n"},{"path":[4,11,9,3],"span":[618,11,12]},{"path":[4,11,9,3,1],"span":[618,11,12]},{"path":[4,11,9,3,2],"span":[618,11,12]},{"path":[4,11,9],"span":[619,2,13],"trailingComments":" javanano_as_lite\n"},{"path":[4,11,9,4],"span":[619,11,12]},{"path":[4,11,9,4,1],"span":[619,11,12]},{"path":[4,11,9,4,2],"span":[619,11,12]},{"path":[4,11,2,4],"span":[631,2,80],"leadingComments":" Enable the legacy handling of JSON field name conflicts.  This lowercases\n and strips underscored from the fields before comparison in proto3 only.\n The new behavior takes `json_name` into account and applies to proto2 as\n well.\n\n This should only be used as a temporary measure against broken builds due\n to the change in behavior for JSON field name conflicts.\n\n TODO This is legacy behavior we plan to remove once downstream\n teams have had time to migrate.\n"},{"path":[4,11,2,4,4],"span":[631,2,10]},{"path":[4,11,2,4,5],"span":[631,11,15]},{"path":[4,11,2,4,1],"span":[631,16,54]},{"path":[4,11,2,4,3],"span":[631,57,59]},{"path":[4,11,2,4,8],"span":[631,60,79]},{"path":[4,11,2,4,8,3],"span":[631,61,78]},{"path":[4,11,2,5],"span":[634,2,36],"leadingComments":" Any features defined in the specific edition.\n"},{"path":[4,11,2,5,4],"span":[634,2,10]},{"path":[4,11,2,5,6],"span":[634,11,21]},{"path":[4,11,2,5,1],"span":[634,22,30]},{"path":[4,11,2,5,3],"span":[634,33,35]},{"path":[4,11,2,6],"span":[637,2,58],"leadingComments":" The parser stores options it doesn't recognize here. See above.\n"},{"path":[4,11,2,6,4],"span":[637,2,10]},{"path":[4,11,2,6,6],"span":[637,11,30]},{"path":[4,11,2,6,1],"span":[637,31,51]},{"path":[4,11,2,6,3],"span":[637,54,57]},{"path":[4,11,5],"span":[640,2,25],"leadingComments":" Clients can define custom options in extensions of this message. See above.\n"},{"path":[4,11,5,0],"span":[640,13,24]},{"path":[4,11,5,0,1],"span":[640,13,17]},{"path":[4,11,5,0,2],"span":[640,21,24]},{"path":[4,12],"span":[643,0,806,1]},{"path":[4,12,1],"span":[643,8,20]},{"path":[4,12,2,0],"span":[651,2,69],"leadingComments":" NOTE: ctype is deprecated. Use `features.(pb.cpp).string_type` instead.\n The ctype option instructs the C++ code generator to use a different\n representation of the field than it normally would.  See the specific\n options below.  This option is only implemented to support use of\n [ctype=CORD] and [ctype=STRING] (the default) on non-repeated fields of\n type \"bytes\" in the open source release.\n TODO: make ctype actually deprecated.\n"},{"path":[4,12,2,0,4],"span":[651,2,10]},{"path":[4,12,2,0,6],"span":[651,11,16]},{"path":[4,12,2,0,1],"span":[651,17,22]},{"path":[4,12,2,0,3],"span":[651,25,26]},{"path":[4,12,2,0,8],"span":[651,27,68]},{"path":[4,12,2,0,7],"span":[651,51,67]},{"path":[4,12,4,0],"span":[652,2,665,3]},{"path":[4,12,4,0,1],"span":[652,7,12]},{"path":[4,12,4,0,2,0],"span":[654,4,15],"leadingComments":" Default mode.\n"},{"path":[4,12,4,0,2,0,1],"span":[654,4,10]},{"path":[4,12,4,0,2,0,2],"span":[654,13,14]},{"path":[4,12,4,0,2,1],"span":[662,4,13],"leadingComments":" The option [ctype=CORD] may be applied to a non-repeated field of type\n \"bytes\". It indicates that in C++, the data should be stored in a Cord\n instead of a string.  For very large strings, this may reduce memory\n fragmentation. It may also allow better performance when parsing from a\n Cord, or when parsing with aliasing enabled, as the parsed Cord may then\n alias the original buffer.\n"},{"path":[4,12,4,0,2,1,1],"span":[662,4,8]},{"path":[4,12,4,0,2,1,2],"span":[662,11,12]},{"path":[4,12,4,0,2,2],"span":[664,4,21]},{"path":[4,12,4,0,2,2,1],"span":[664,4,16]},{"path":[4,12,4,0,2,2,2],"span":[664,19,20]},{"path":[4,12,2,1],"span":[673,2,27],"leadingComments":" The packed option can be enabled for repeated primitive fields to enable\n a more efficient representation on the wire. Rather than repeatedly\n writing the tag and type for each element, the entire array is encoded as\n a single length-delimited blob. In proto3, only explicit setting it to\n false will avoid using packed encoding.  This option is prohibited in\n Editions, but the `repeated_field_encoding` feature can be used to control\n the behavior.\n"},{"path":[4,12,2,1,4],"span":[673,2,10]},{"path":[4,12,2,1,5],"span":[673,11,15]},{"path":[4,12,2,1,1],"span":[673,16,22]},{"path":[4,12,2,1,3],"span":[673,25,26]},{"path":[4,12,2,2],"span":[686,2,51],"leadingComments":" The jstype option determines the JavaScript type used for values of the\n field.  The option is permitted only for 64 bit integral and fixed types\n (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING\n is represented as JavaScript string, which avoids loss of precision that\n can happen when a large value is converted to a floating point JavaScript.\n Specifying JS_NUMBER for the jstype causes the generated JavaScript code to\n use the JavaScript \"number\" type.  The behavior of the default option\n JS_NORMAL is implementation dependent.\n\n This option is an enum to permit additional types to be added, e.g.\n goog.math.Integer.\n"},{"path":[4,12,2,2,4],"span":[686,2,10]},{"path":[4,12,2,2,6],"span":[686,11,17]},{"path":[4,12,2,2,1],"span":[686,18,24]},{"path":[4,12,2,2,3],"span":[686,27,28]},{"path":[4,12,2,2,8],"span":[686,29,50]},{"path":[4,12,2,2,7],"span":[686,30,49]},{"path":[4,12,4,1],"span":[687,2,696,3]},{"path":[4,12,4,1,1],"span":[687,7,13]},{"path":[4,12,4,1,2,0],"span":[689,4,18],"leadingComments":" Use the default type.\n"},{"path":[4,12,4,1,2,0,1],"span":[689,4,13]},{"path":[4,12,4,1,2,0,2],"span":[689,16,17]},{"path":[4,12,4,1,2,1],"span":[692,4,18],"leadingComments":" Use JavaScript strings.\n"},{"path":[4,12,4,1,2,1,1],"span":[692,4,13]},{"path":[4,12,4,1,2,1,2],"span":[692,16,17]},{"path":[4,12,4,1,2,2],"span":[695,4,18],"leadingComments":" Use JavaScript numbers.\n"},{"path":[4,12,4,1,2,2,1],"span":[695,4,13]},{"path":[4,12,4,1,2,2,2],"span":[695,16,17]},{"path":[4,12,2,3],"span":[720,2,43],"leadingComments":" Should this field be parsed lazily?  Lazy applies only to message-type\n fields.  It means that when the outer message is initially parsed, the\n inner message's contents will not be parsed but instead stored in encoded\n form.  The inner message will actually be parsed when it is first accessed.\n\n This is only a hint.  Implementations are free to choose whether to use\n eager or lazy parsing regardless of the value of this option.  However,\n setting this option true suggests that the protocol author believes that\n using lazy parsing on this field is worth the additional bookkeeping\n overhead typically needed to implement it.\n\n This option does not affect the public interface of any generated code;\n all method signatures remain the same.  Furthermore, thread-safety of the\n interface is not affected by this option; const methods remain safe to\n call from multiple threads concurrently, while non-const methods continue\n to require exclusive access.\n\n Note that lazy message fields are still eagerly verified to check\n ill-formed wireformat or missing required fields. Calling IsInitialized()\n on the outer message would fail if the inner message has missing required\n fields. Failed verification would result in parsing failure (except when\n uninitialized messages are acceptable).\n"},{"path":[4,12,2,3,4],"span":[720,2,10]},{"path":[4,12,2,3,5],"span":[720,11,15]},{"path":[4,12,2,3,1],"span":[720,16,20]},{"path":[4,12,2,3,3],"span":[720,23,24]},{"path":[4,12,2,3,8],"span":[720,25,42]},{"path":[4,12,2,3,7],"span":[720,26,41]},{"path":[4,12,2,4],"span":[725,2,55],"leadingComments":" unverified_lazy does no correctness checks on the byte stream. This should\n only be used where lazy with verification is prohibitive for performance\n reasons.\n"},{"path":[4,12,2,4,4],"span":[725,2,10]},{"path":[4,12,2,4,5],"span":[725,11,15]},{"path":[4,12,2,4,1],"span":[725,16,31]},{"path":[4,12,2,4,3],"span":[725,34,36]},{"path":[4,12,2,4,8],"span":[725,37,54]},{"path":[4,12,2,4,7],"span":[725,38,53]},{"path":[4,12,2,5],"span":[731,2,49],"leadingComments":" Is this field deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for accessors, or it will be completely ignored; in the very least, this\n is a formalization for deprecating fields.\n"},{"path":[4,12,2,5,4],"span":[731,2,10]},{"path":[4,12,2,5,5],"span":[731,11,15]},{"path":[4,12,2,5,1],"span":[731,16,26]},{"path":[4,12,2,5,3],"span":[731,29,30]},{"path":[4,12,2,5,8],"span":[731,31,48]},{"path":[4,12,2,5,7],"span":[731,32,47]},{"path":[4,12,2,6],"span":[734,2,44],"leadingComments":" For Google-internal migration only. Do not use.\n"},{"path":[4,12,2,6,4],"span":[734,2,10]},{"path":[4,12,2,6,5],"span":[734,11,15]},{"path":[4,12,2,6,1],"span":[734,16,20]},{"path":[4,12,2,6,3],"span":[734,23,25]},{"path":[4,12,2,6,8],"span":[734,26,43]},{"path":[4,12,2,6,7],"span":[734,27,42]},{"path":[4,12,2,7],"span":[738,2,52],"leadingComments":" Indicate that the field value should not be printed out when using debug\n formats, e.g. when the field contains sensitive credentials.\n"},{"path":[4,12,2,7,4],"span":[738,2,10]},{"path":[4,12,2,7,5],"span":[738,11,15]},{"path":[4,12,2,7,1],"span":[738,16,28]},{"path":[4,12,2,7,3],"span":[738,31,33]},{"path":[4,12,2,7,8],"span":[738,34,51]},{"path":[4,12,2,7,7],"span":[738,35,50]},{"path":[4,12,4,2],"span":[741,2,745,3],"leadingComments":" If set to RETENTION_SOURCE, the option will be omitted from the binary.\n"},{"path":[4,12,4,2,1],"span":[741,7,22]},{"path":[4,12,4,2,2,0],"span":[742,4,26]},{"path":[4,12,4,2,2,0,1],"span":[742,4,21]},{"path":[4,12,4,2,2,0,2],"span":[742,24,25]},{"path":[4,12,4,2,2,1],"span":[743,4,26]},{"path":[4,12,4,2,2,1,1],"span":[743,4,21]},{"path":[4,12,4,2,2,1,2],"span":[743,24,25]},{"path":[4,12,4,2,2,2],"span":[744,4,25]},{"path":[4,12,4,2,2,2,1],"span":[744,4,20]},{"path":[4,12,4,2,2,2,2],"span":[744,23,24]},{"path":[4,12,2,8],"span":[747,2,42]},{"path":[4,12,2,8,4],"span":[747,2,10]},{"path":[4,12,2,8,6],"span":[747,11,26]},{"path":[4,12,2,8,1],"span":[747,27,36]},{"path":[4,12,2,8,3],"span":[747,39,41]},{"path":[4,12,4,3],"span":[752,2,763,3],"leadingComments":" This indicates the types of entities that the field may apply to when used\n as an option. If it is unset, then the field may be freely used as an\n option on any kind of entity.\n"},{"path":[4,12,4,3,1],"span":[752,7,23]},{"path":[4,12,4,3,2,0],"span":[753,4,28]},{"path":[4,12,4,3,2,0,1],"span":[753,4,23]},{"path":[4,12,4,3,2,0,2],"span":[753,26,27]},{"path":[4,12,4,3,2,1],"span":[754,4,25]},{"path":[4,12,4,3,2,1,1],"span":[754,4,20]},{"path":[4,12,4,3,2,1,2],"span":[754,23,24]},{"path":[4,12,4,3,2,2],"span":[755,4,36]},{"path":[4,12,4,3,2,2,1],"span":[755,4,31]},{"path":[4,12,4,3,2,2,2],"span":[755,34,35]},{"path":[4,12,4,3,2,3],"span":[756,4,28]},{"path":[4,12,4,3,2,3,1],"span":[756,4,23]},{"path":[4,12,4,3,2,3,2],"span":[756,26,27]},{"path":[4,12,4,3,2,4],"span":[757,4,26]},{"path":[4,12,4,3,2,4,1],"span":[757,4,21]},{"path":[4,12,4,3,2,4,2],"span":[757,24,25]},{"path":[4,12,4,3,2,5],"span":[758,4,26]},{"path":[4,12,4,3,2,5,1],"span":[758,4,21]},{"path":[4,12,4,3,2,5,2],"span":[758,24,25]},{"path":[4,12,4,3,2,6],"span":[759,4,25]},{"path":[4,12,4,3,2,6,1],"span":[759,4,20]},{"path":[4,12,4,3,2,6,2],"span":[759,23,24]},{"path":[4,12,4,3,2,7],"span":[760,4,31]},{"path":[4,12,4,3,2,7,1],"span":[760,4,26]},{"path":[4,12,4,3,2,7,2],"span":[760,29,30]},{"path":[4,12,4,3,2,8],"span":[761,4,28]},{"path":[4,12,4,3,2,8,1],"span":[761,4,23]},{"path":[4,12,4,3,2,8,2],"span":[761,26,27]},{"path":[4,12,4,3,2,9],"span":[762,4,27]},{"path":[4,12,4,3,2,9,1],"span":[762,4,22]},{"path":[4,12,4,3,2,9,2],"span":[762,25,26]},{"path":[4,12,2,9],"span":[765,2,41]},{"path":[4,12,2,9,4],"span":[765,2,10]},{"path":[4,12,2,9,6],"span":[765,11,27]},{"path":[4,12,2,9,1],"span":[765,28,35]},{"path":[4,12,2,9,3],"span":[765,38,40]},{"path":[4,12,3,0],"span":[767,2,770,3]},{"path":[4,12,3,0,1],"span":[767,10,24]},{"path":[4,12,3,0,2,0],"span":[768,4,33]},{"path":[4,12,3,0,2,0,4],"span":[768,4,12]},{"path":[4,12,3,0,2,0,6],"span":[768,13,20]},{"path":[4,12,3,0,2,0,1],"span":[768,21,28]},{"path":[4,12,3,0,2,0,3],"span":[768,31,32]},{"path":[4,12,3,0,2,1],"span":[769,4,30],"trailingComments":" Textproto value.\n"},{"path":[4,12,3,0,2,1,4],"span":[769,4,12]},{"path":[4,12,3,0,2,1,5],"span":[769,13,19]},{"path":[4,12,3,0,2,1,1],"span":[769,20,25]},{"path":[4,12,3,0,2,1,3],"span":[769,28,29]},{"path":[4,12,2,10],"span":[771,2,48]},{"path":[4,12,2,10,4],"span":[771,2,10]},{"path":[4,12,2,10,6],"span":[771,11,25]},{"path":[4,12,2,10,1],"span":[771,26,42]},{"path":[4,12,2,10,3],"span":[771,45,47]},{"path":[4,12,2,11],"span":[774,2,36],"leadingComments":" Any features defined in the specific edition.\n"},{"path":[4,12,2,11,4],"span":[774,2,10]},{"path":[4,12,2,11,6],"span":[774,11,21]},{"path":[4,12,2,11,1],"span":[774,22,30]},{"path":[4,12,2,11,3],"span":[774,33,35]},{"path":[4,12,3,1],"span":[777,2,795,3],"leadingComments":" Information about the support window of a feature.\n"},{"path":[4,12,3,1,1],"span":[777,10,24]},{"path":[4,12,3,1,2,0],"span":[781,4,44],"leadingComments":" The edition that this feature was first available in.  In editions\n earlier than this one, the default assigned to EDITION_LEGACY will be\n used, and proto files will not be able to override it.\n"},{"path":[4,12,3,1,2,0,4],"span":[781,4,12]},{"path":[4,12,3,1,2,0,6],"span":[781,13,20]},{"path":[4,12,3,1,2,0,1],"span":[781,21,39]},{"path":[4,12,3,1,2,0,3],"span":[781,42,43]},{"path":[4,12,3,1,2,1],"span":[785,4,44],"leadingComments":" The edition this feature becomes deprecated in.  Using this after this\n edition may trigger warnings.\n"},{"path":[4,12,3,1,2,1,4],"span":[785,4,12]},{"path":[4,12,3,1,2,1,6],"span":[785,13,20]},{"path":[4,12,3,1,2,1,1],"span":[785,21,39]},{"path":[4,12,3,1,2,1,3],"span":[785,42,43]},{"path":[4,12,3,1,2,2],"span":[789,4,44],"leadingComments":" The deprecation warning text if this feature is used after the edition it\n was marked deprecated in.\n"},{"path":[4,12,3,1,2,2,4],"span":[789,4,12]},{"path":[4,12,3,1,2,2,5],"span":[789,13,19]},{"path":[4,12,3,1,2,2,1],"span":[789,20,39]},{"path":[4,12,3,1,2,2,3],"span":[789,42,43]},{"path":[4,12,3,1,2,3],"span":[794,4,41],"leadingComments":" The edition this feature is no longer available in.  In editions after\n this one, the last default assigned will be used, and proto files will\n not be able to override it.\n"},{"path":[4,12,3,1,2,3,4],"span":[794,4,12]},{"path":[4,12,3,1,2,3,6],"span":[794,13,20]},{"path":[4,12,3,1,2,3,1],"span":[794,21,36]},{"path":[4,12,3,1,2,3,3],"span":[794,39,40]},{"path":[4,12,2,12],"span":[796,2,47]},{"path":[4,12,2,12,4],"span":[796,2,10]},{"path":[4,12,2,12,6],"span":[796,11,25]},{"path":[4,12,2,12,1],"span":[796,26,41]},{"path":[4,12,2,12,3],"span":[796,44,46]},{"path":[4,12,2,13],"span":[799,2,58],"leadingComments":" The parser stores options it doesn't recognize here. See above.\n"},{"path":[4,12,2,13,4],"span":[799,2,10]},{"path":[4,12,2,13,6],"span":[799,11,30]},{"path":[4,12,2,13,1],"span":[799,31,51]},{"path":[4,12,2,13,3],"span":[799,54,57]},{"path":[4,12,5],"span":[802,2,25],"leadingComments":" Clients can define custom options in extensions of this message. See above.\n"},{"path":[4,12,5,0],"span":[802,13,24]},{"path":[4,12,5,0,1],"span":[802,13,17]},{"path":[4,12,5,0,2],"span":[802,21,24]},{"path":[4,12,9],"span":[804,2,13],"trailingComments":" removed jtype\n"},{"path":[4,12,9,0],"span":[804,11,12]},{"path":[4,12,9,0,1],"span":[804,11,12]},{"path":[4,12,9,0,2],"span":[804,11,12]},{"path":[4,12,9],"span":[805,2,14],"trailingComments":" reserve target, target_obsolete_do_not_use\n"},{"path":[4,12,9,1],"span":[805,11,13]},{"path":[4,12,9,1,1],"span":[805,11,13]},{"path":[4,12,9,1,2],"span":[805,11,13]},{"path":[4,13],"span":[808,0,817,1]},{"path":[4,13,1],"span":[808,8,20]},{"path":[4,13,2,0],"span":[810,2,35],"leadingComments":" Any features defined in the specific edition.\n"},{"path":[4,13,2,0,4],"span":[810,2,10]},{"path":[4,13,2,0,6],"span":[810,11,21]},{"path":[4,13,2,0,1],"span":[810,22,30]},{"path":[4,13,2,0,3],"span":[810,33,34]},{"path":[4,13,2,1],"span":[813,2,58],"leadingComments":" The parser stores options it doesn't recognize here. See above.\n"},{"path":[4,13,2,1,4],"span":[813,2,10]},{"path":[4,13,2,1,6],"span":[813,11,30]},{"path":[4,13,2,1,1],"span":[813,31,51]},{"path":[4,13,2,1,3],"span":[813,54,57]},{"path":[4,13,5],"span":[816,2,25],"leadingComments":" Clients can define custom options in extensions of this message. See above.\n"},{"path":[4,13,5,0],"span":[816,13,24]},{"path":[4,13,5,0,1],"span":[816,13,17]},{"path":[4,13,5,0,2],"span":[816,21,24]},{"path":[4,14],"span":[819,0,849,1]},{"path":[4,14,1],"span":[819,8,19]},{"path":[4,14,2,0],"span":[823,2,32],"leadingComments":" Set this option to true to allow mapping different tag names to the same\n value.\n"},{"path":[4,14,2,0,4],"span":[823,2,10]},{"path":[4,14,2,0,5],"span":[823,11,15]},{"path":[4,14,2,0,1],"span":[823,16,27]},{"path":[4,14,2,0,3],"span":[823,30,31]},{"path":[4,14,2,1],"span":[829,2,49],"leadingComments":" Is this enum deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the enum, or it will be completely ignored; in the very least, this\n is a formalization for deprecating enums.\n"},{"path":[4,14,2,1,4],"span":[829,2,10]},{"path":[4,14,2,1,5],"span":[829,11,15]},{"path":[4,14,2,1,1],"span":[829,16,26]},{"path":[4,14,2,1,3],"span":[829,29,30]},{"path":[4,14,2,1,8],"span":[829,31,48]},{"path":[4,14,2,1,7],"span":[829,32,47]},{"path":[4,14,9],"span":[831,2,13],"trailingComments":" javanano_as_lite\n"},{"path":[4,14,9,0],"span":[831,11,12]},{"path":[4,14,9,0,1],"span":[831,11,12]},{"path":[4,14,9,0,2],"span":[831,11,12]},{"path":[4,14,2,2],"span":[839,2,79],"leadingComments":" Enable the legacy handling of JSON field name conflicts.  This lowercases\n and strips underscored from the fields before comparison in proto3 only.\n The new behavior takes `json_name` into account and applies to proto2 as\n well.\n TODO Remove this legacy behavior once downstream teams have\n had time to migrate.\n"},{"path":[4,14,2,2,4],"span":[839,2,10]},{"path":[4,14,2,2,5],"span":[839,11,15]},{"path":[4,14,2,2,1],"span":[839,16,54]},{"path":[4,14,2,2,3],"span":[839,57,58]},{"path":[4,14,2,2,8],"span":[839,59,78]},{"path":[4,14,2,2,8,3],"span":[839,60,77]},{"path":[4,14,2,3],"span":[842,2,35],"leadingComments":" Any features defined in the specific edition.\n"},{"path":[4,14,2,3,4],"span":[842,2,10]},{"path":[4,14,2,3,6],"span":[842,11,21]},{"path":[4,14,2,3,1],"span":[842,22,30]},{"path":[4,14,2,3,3],"span":[842,33,34]},{"path":[4,14,2,4],"span":[845,2,58],"leadingComments":" The parser stores options it doesn't recognize here. See above.\n"},{"path":[4,14,2,4,4],"span":[845,2,10]},{"path":[4,14,2,4,6],"span":[845,11,30]},{"path":[4,14,2,4,1],"span":[845,31,51]},{"path":[4,14,2,4,3],"span":[845,54,57]},{"path":[4,14,5],"span":[848,2,25],"leadingComments":" Clients can define custom options in extensions of this message. See above.\n"},{"path":[4,14,5,0],"span":[848,13,24]},{"path":[4,14,5,0,1],"span":[848,13,17]},{"path":[4,14,5,0,2],"span":[848,21,24]},{"path":[4,15],"span":[851,0,874,1]},{"path":[4,15,1],"span":[851,8,24]},{"path":[4,15,2,0],"span":[856,2,49],"leadingComments":" Is this enum value deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the enum value, or it will be completely ignored; in the very least,\n this is a formalization for deprecating enum values.\n"},{"path":[4,15,2,0,4],"span":[856,2,10]},{"path":[4,15,2,0,5],"span":[856,11,15]},{"path":[4,15,2,0,1],"span":[856,16,26]},{"path":[4,15,2,0,3],"span":[856,29,30]},{"path":[4,15,2,0,8],"span":[856,31,48]},{"path":[4,15,2,0,7],"span":[856,32,47]},{"path":[4,15,2,1],"span":[859,2,35],"leadingComments":" Any features defined in the specific edition.\n"},{"path":[4,15,2,1,4],"span":[859,2,10]},{"path":[4,15,2,1,6],"span":[859,11,21]},{"path":[4,15,2,1,1],"span":[859,22,30]},{"path":[4,15,2,1,3],"span":[859,33,34]},{"path":[4,15,2,2],"span":[864,2,51],"leadingComments":" Indicate that fields annotated with this enum value should not be printed\n out when using debug formats, e.g. when the field contains sensitive\n credentials.\n"},{"path":[4,15,2,2,4],"span":[864,2,10]},{"path":[4,15,2,2,5],"span":[864,11,15]},{"path":[4,15,2,2,1],"span":[864,16,28]},{"path":[4,15,2,2,3],"span":[864,31,32]},{"path":[4,15,2,2,8],"span":[864,33,50]},{"path":[4,15,2,2,7],"span":[864,34,49]},{"path":[4,15,2,3],"span":[867,2,59],"leadingComments":" Information about the support window of a feature value.\n"},{"path":[4,15,2,3,4],"span":[867,2,10]},{"path":[4,15,2,3,6],"span":[867,11,38]},{"path":[4,15,2,3,1],"span":[867,39,54]},{"path":[4,15,2,3,3],"span":[867,57,58]},{"path":[4,15,2,4],"span":[870,2,58],"leadingComments":" The parser stores options it doesn't recognize here. See above.\n"},{"path":[4,15,2,4,4],"span":[870,2,10]},{"path":[4,15,2,4,6],"span":[870,11,30]},{"path":[4,15,2,4,1],"span":[870,31,51]},{"path":[4,15,2,4,3],"span":[870,54,57]},{"path":[4,15,5],"span":[873,2,25],"leadingComments":" Clients can define custom options in extensions of this message. See above.\n"},{"path":[4,15,5,0],"span":[873,13,24]},{"path":[4,15,5,0,1],"span":[873,13,17]},{"path":[4,15,5,0,2],"span":[873,21,24]},{"path":[4,16],"span":[876,0,897,1]},{"path":[4,16,1],"span":[876,8,22]},{"path":[4,16,2,0],"span":[879,2,36],"leadingComments":" Any features defined in the specific edition.\n"},{"path":[4,16,2,0,4],"span":[879,2,10]},{"path":[4,16,2,0,6],"span":[879,11,21]},{"path":[4,16,2,0,1],"span":[879,22,30]},{"path":[4,16,2,0,3],"span":[879,33,35]},{"path":[4,16,2,1],"span":[890,2,50],"leadingComments":" Is this service deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the service, or it will be completely ignored; in the very least,\n this is a formalization for deprecating services.\n","leadingDetachedComments":[" Note:  Field numbers 1 through 32 are reserved for Google's internal RPC\n   framework.  We apologize for hoarding these numbers to ourselves, but\n   we were already using them long before we decided to release Protocol\n   Buffers.\n"]},{"path":[4,16,2,1,4],"span":[890,2,10]},{"path":[4,16,2,1,5],"span":[890,11,15]},{"path":[4,16,2,1,1],"span":[890,16,26]},{"path":[4,16,2,1,3],"span":[890,29,31]},{"path":[4,16,2,1,8],"span":[890,32,49]},{"path":[4,16,2,1,7],"span":[890,33,48]},{"path":[4,16,2,2],"span":[893,2,58],"leadingComments":" The parser stores options it doesn't recognize here. See above.\n"},{"path":[4,16,2,2,4],"span":[893,2,10]},{"path":[4,16,2,2,6],"span":[893,11,30]},{"path":[4,16,2,2,1],"span":[893,31,51]},{"path":[4,16,2,2,3],"span":[893,54,57]},{"path":[4,16,5],"span":[896,2,25],"leadingComments":" Clients can define custom options in extensions of this message. See above.\n"},{"path":[4,16,5,0],"span":[896,13,24]},{"path":[4,16,5,0,1],"span":[896,13,17]},{"path":[4,16,5,0,2],"span":[896,21,24]},{"path":[4,17],"span":[899,0,931,1]},{"path":[4,17,1],"span":[899,8,21]},{"path":[4,17,2,0],"span":[910,2,50],"leadingComments":" Is this method deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the method, or it will be completely ignored; in the very least,\n this is a formalization for deprecating methods.\n","leadingDetachedComments":[" Note:  Field numbers 1 through 32 are reserved for Google's internal RPC\n   framework.  We apologize for hoarding these numbers to ourselves, but\n   we were already using them long before we decided to release Protocol\n   Buffers.\n"]},{"path":[4,17,2,0,4],"span":[910,2,10]},{"path":[4,17,2,0,5],"span":[910,11,15]},{"path":[4,17,2,0,1],"span":[910,16,26]},{"path":[4,17,2,0,3],"span":[910,29,31]},{"path":[4,17,2,0,8],"span":[910,32,49]},{"path":[4,17,2,0,7],"span":[910,33,48]},{"path":[4,17,4,0],"span":[915,2,919,3],"leadingComments":" Is this method side-effect-free (or safe in HTTP parlance), or idempotent,\n or neither? HTTP based RPC implementation may choose GET verb for safe\n methods, and PUT verb for idempotent methods instead of the default POST.\n"},{"path":[4,17,4,0,1],"span":[915,7,23]},{"path":[4,17,4,0,2,0],"span":[916,4,28]},{"path":[4,17,4,0,2,0,1],"span":[916,4,23]},{"path":[4,17,4,0,2,0,2],"span":[916,26,27]},{"path":[4,17,4,0,2,1],"span":[917,4,24],"trailingComments":" implies idempotent\n"},{"path":[4,17,4,0,2,1,1],"span":[917,4,19]},{"path":[4,17,4,0,2,1,2],"span":[917,22,23]},{"path":[4,17,4,0,2,2],"span":[918,4,19],"trailingComments":" idempotent, but may have side effects\n"},{"path":[4,17,4,0,2,2,1],"span":[918,4,14]},{"path":[4,17,4,0,2,2,2],"span":[918,17,18]},{"path":[4,17,2,1],"span":[920,2,921,38]},{"path":[4,17,2,1,4],"span":[920,2,10]},{"path":[4,17,2,1,6],"span":[920,11,27]},{"path":[4,17,2,1,1],"span":[920,28,45]},{"path":[4,17,2,1,3],"span":[920,48,50]},{"path":[4,17,2,1,8],"span":[921,6,37]},{"path":[4,17,2,1,7],"span":[921,7,36]},{"path":[4,17,2,2],"span":[924,2,36],"leadingComments":" Any features defined in the specific edition.\n"},{"path":[4,17,2,2,4],"span":[924,2,10]},{"path":[4,17,2,2,6],"span":[924,11,21]},{"path":[4,17,2,2,1],"span":[924,22,30]},{"path":[4,17,2,2,3],"span":[924,33,35]},{"path":[4,17,2,3],"span":[927,2,58],"leadingComments":" The parser stores options it doesn't recognize here. See above.\n"},{"path":[4,17,2,3,4],"span":[927,2,10]},{"path":[4,17,2,3,6],"span":[927,11,30]},{"path":[4,17,2,3,1],"span":[927,31,51]},{"path":[4,17,2,3,3],"span":[927,54,57]},{"path":[4,17,5],"span":[930,2,25],"leadingComments":" Clients can define custom options in extensions of this message. See above.\n"},{"path":[4,17,5,0],"span":[930,13,24]},{"path":[4,17,5,0,1],"span":[930,13,17]},{"path":[4,17,5,0,2],"span":[930,21,24]},{"path":[4,18],"span":[939,0,959,1],"leadingComments":" A message representing a option the parser does not recognize. This only\n appears in options protos created by the compiler::Parser class.\n DescriptorPool resolves these when building Descriptor objects. Therefore,\n options protos in descriptor objects (e.g. returned by Descriptor::options(),\n or produced by Descriptor::CopyTo()) will never have UninterpretedOptions\n in them.\n"},{"path":[4,18,1],"span":[939,8,27]},{"path":[4,18,3,0],"span":[945,2,948,3],"leadingComments":" The name of the uninterpreted option.  Each string represents a segment in\n a dot-separated name.  is_extension is true iff a segment represents an\n extension (denoted with parentheses in options specs in .proto files).\n E.g.,{ [\"foo\", false], [\"bar.baz\", true], [\"moo\", false] } represents\n \"foo.(bar.baz).moo\".\n"},{"path":[4,18,3,0,1],"span":[945,10,18]},{"path":[4,18,3,0,2,0],"span":[946,4,34]},{"path":[4,18,3,0,2,0,4],"span":[946,4,12]},{"path":[4,18,3,0,2,0,5],"span":[946,13,19]},{"path":[4,18,3,0,2,0,1],"span":[946,20,29]},{"path":[4,18,3,0,2,0,3],"span":[946,32,33]},{"path":[4,18,3,0,2,1],"span":[947,4,35]},{"path":[4,18,3,0,2,1,4],"span":[947,4,12]},{"path":[4,18,3,0,2,1,5],"span":[947,13,17]},{"path":[4,18,3,0,2,1,1],"span":[947,18,30]},{"path":[4,18,3,0,2,1,3],"span":[947,33,34]},{"path":[4,18,2,0],"span":[949,2,29]},{"path":[4,18,2,0,4],"span":[949,2,10]},{"path":[4,18,2,0,6],"span":[949,11,19]},{"path":[4,18,2,0,1],"span":[949,20,24]},{"path":[4,18,2,0,3],"span":[949,27,28]},{"path":[4,18,2,1],"span":[953,2,39],"leadingComments":" The value of the uninterpreted option, in whatever type the tokenizer\n identified it as during parsing. Exactly one of these should be set.\n"},{"path":[4,18,2,1,4],"span":[953,2,10]},{"path":[4,18,2,1,5],"span":[953,11,17]},{"path":[4,18,2,1,1],"span":[953,18,34]},{"path":[4,18,2,1,3],"span":[953,37,38]},{"path":[4,18,2,2],"span":[954,2,41]},{"path":[4,18,2,2,4],"span":[954,2,10]},{"path":[4,18,2,2,5],"span":[954,11,17]},{"path":[4,18,2,2,1],"span":[954,18,36]},{"path":[4,18,2,2,3],"span":[954,39,40]},{"path":[4,18,2,3],"span":[955,2,40]},{"path":[4,18,2,3,4],"span":[955,2,10]},{"path":[4,18,2,3,5],"span":[955,11,16]},{"path":[4,18,2,3,1],"span":[955,17,35]},{"path":[4,18,2,3,3],"span":[955,38,39]},{"path":[4,18,2,4],"span":[956,2,35]},{"path":[4,18,2,4,4],"span":[956,2,10]},{"path":[4,18,2,4,5],"span":[956,11,17]},{"path":[4,18,2,4,1],"span":[956,18,30]},{"path":[4,18,2,4,3],"span":[956,33,34]},{"path":[4,18,2,5],"span":[957,2,34]},{"path":[4,18,2,5,4],"span":[957,2,10]},{"path":[4,18,2,5,5],"span":[957,11,16]},{"path":[4,18,2,5,1],"span":[957,17,29]},{"path":[4,18,2,5,3],"span":[957,32,33]},{"path":[4,18,2,6],"span":[958,2,38]},{"path":[4,18,2,6,4],"span":[958,2,10]},{"path":[4,18,2,6,5],"span":[958,11,17]},{"path":[4,18,2,6,1],"span":[958,18,33]},{"path":[4,18,2,6,3],"span":[958,36,37]},{"path":[4,19],"span":[970,0,1093,1],"leadingComments":" TODO Enums in C++ gencode (and potentially other languages) are\n not well scoped.  This means that each of the feature enums below can clash\n with each other.  The short names we've chosen maximize call-site\n readability, but leave us very open to this scenario.  A future feature will\n be designed and implemented to handle this, hopefully before we ever hit a\n conflict here.\n","leadingDetachedComments":[" ===================================================================\n Features\n"]},{"path":[4,19,1],"span":[970,8,18]},{"path":[4,19,4,0],"span":[971,2,976,3]},{"path":[4,19,4,0,1],"span":[971,7,20]},{"path":[4,19,4,0,2,0],"span":[972,4,31]},{"path":[4,19,4,0,2,0,1],"span":[972,4,26]},{"path":[4,19,4,0,2,0,2],"span":[972,29,30]},{"path":[4,19,4,0,2,1],"span":[973,4,17]},{"path":[4,19,4,0,2,1,1],"span":[973,4,12]},{"path":[4,19,4,0,2,1,2],"span":[973,15,16]},{"path":[4,19,4,0,2,2],"span":[974,4,17]},{"path":[4,19,4,0,2,2,1],"span":[974,4,12]},{"path":[4,19,4,0,2,2,2],"span":[974,15,16]},{"path":[4,19,4,0,2,3],"span":[975,4,24]},{"path":[4,19,4,0,2,3,1],"span":[975,4,19]},{"path":[4,19,4,0,2,3,2],"span":[975,22,23]},{"path":[4,19,2,0],"span":[977,2,987,4]},{"path":[4,19,2,0,4],"span":[977,2,10]},{"path":[4,19,2,0,6],"span":[977,11,24]},{"path":[4,19,2,0,1],"span":[977,25,39]},{"path":[4,19,2,0,3],"span":[977,42,43]},{"path":[4,19,2,0,8],"span":[977,44,987,3]},{"path":[4,19,2,0,8,17],"span":[978,4,33]},{"path":[4,19,2,0,8,19,0],"span":[979,4,31]},{"path":[4,19,2,0,8,19,1],"span":[980,4,30]},{"path":[4,19,2,0,8,22],"span":[981,4,983,5]},{"path":[4,19,2,0,8,22,1],"span":[982,6,38]},{"path":[4,19,2,0,8,20,0],"span":[984,4,69]},{"path":[4,19,2,0,8,20,0,3],"span":[984,25,48]},{"path":[4,19,2,0,8,20,0,2],"span":[984,50,67]},{"path":[4,19,2,0,8,20,1],"span":[985,4,69]},{"path":[4,19,2,0,8,20,1,3],"span":[985,25,48]},{"path":[4,19,2,0,8,20,1,2],"span":[985,50,67]},{"path":[4,19,2,0,8,20,2],"span":[986,4,67]},{"path":[4,19,2,0,8,20,2,3],"span":[986,25,46]},{"path":[4,19,2,0,8,20,2,2],"span":[986,48,65]},{"path":[4,19,4,1],"span":[989,2,993,3]},{"path":[4,19,4,1,1],"span":[989,7,15]},{"path":[4,19,4,1,2,0],"span":[990,4,26]},{"path":[4,19,4,1,2,0,1],"span":[990,4,21]},{"path":[4,19,4,1,2,0,2],"span":[990,24,25]},{"path":[4,19,4,1,2,1],"span":[991,4,13]},{"path":[4,19,4,1,2,1,1],"span":[991,4,8]},{"path":[4,19,4,1,2,1,2],"span":[991,11,12]},{"path":[4,19,4,1,2,2],"span":[992,4,15]},{"path":[4,19,4,1,2,2,1],"span":[992,4,10]},{"path":[4,19,4,1,2,2,2],"span":[992,13,14]},{"path":[4,19,2,1],"span":[994,2,1003,4]},{"path":[4,19,2,1,4],"span":[994,2,10]},{"path":[4,19,2,1,6],"span":[994,11,19]},{"path":[4,19,2,1,1],"span":[994,20,29]},{"path":[4,19,2,1,3],"span":[994,32,33]},{"path":[4,19,2,1,8],"span":[994,34,1003,3]},{"path":[4,19,2,1,8,17],"span":[995,4,33]},{"path":[4,19,2,1,8,19,0],"span":[996,4,30]},{"path":[4,19,2,1,8,19,1],"span":[997,4,30]},{"path":[4,19,2,1,8,22],"span":[998,4,1000,5]},{"path":[4,19,2,1,8,22,1],"span":[999,6,38]},{"path":[4,19,2,1,8,20,0],"span":[1001,4,67]},{"path":[4,19,2,1,8,20,0,3],"span":[1001,25,48]},{"path":[4,19,2,1,8,20,0,2],"span":[1001,50,65]},{"path":[4,19,2,1,8,20,1],"span":[1002,4,65]},{"path":[4,19,2,1,8,20,1,3],"span":[1002,25,48]},{"path":[4,19,2,1,8,20,1,2],"span":[1002,50,63]},{"path":[4,19,4,2],"span":[1005,2,1009,3]},{"path":[4,19,4,2,1],"span":[1005,7,28]},{"path":[4,19,4,2,2,0],"span":[1006,4,40]},{"path":[4,19,4,2,2,0,1],"span":[1006,4,35]},{"path":[4,19,4,2,2,0,2],"span":[1006,38,39]},{"path":[4,19,4,2,2,1],"span":[1007,4,15]},{"path":[4,19,4,2,2,1,1],"span":[1007,4,10]},{"path":[4,19,4,2,2,1,2],"span":[1007,13,14]},{"path":[4,19,4,2,2,2],"span":[1008,4,17]},{"path":[4,19,4,2,2,2,1],"span":[1008,4,12]},{"path":[4,19,4,2,2,2,2],"span":[1008,15,16]},{"path":[4,19,2,2],"span":[1010,2,1019,4]},{"path":[4,19,2,2,4],"span":[1010,2,10]},{"path":[4,19,2,2,6],"span":[1010,11,32]},{"path":[4,19,2,2,1],"span":[1010,33,56]},{"path":[4,19,2,2,3],"span":[1010,59,60]},{"path":[4,19,2,2,8],"span":[1010,61,1019,3]},{"path":[4,19,2,2,8,17],"span":[1011,4,33]},{"path":[4,19,2,2,8,19,0],"span":[1012,4,31]},{"path":[4,19,2,2,8,19,1],"span":[1013,4,30]},{"path":[4,19,2,2,8,22],"span":[1014,4,1016,5]},{"path":[4,19,2,2,8,22,1],"span":[1015,6,38]},{"path":[4,19,2,2,8,20,0],"span":[1017,4,69]},{"path":[4,19,2,2,8,20,0,3],"span":[1017,25,48]},{"path":[4,19,2,2,8,20,0,2],"span":[1017,50,67]},{"path":[4,19,2,2,8,20,1],"span":[1018,4,67]},{"path":[4,19,2,2,8,20,1,3],"span":[1018,25,48]},{"path":[4,19,2,2,8,20,1,2],"span":[1018,50,65]},{"path":[4,19,4,3],"span":[1021,2,1026,3]},{"path":[4,19,4,3,1],"span":[1021,7,21]},{"path":[4,19,4,3,2,0],"span":[1022,4,32]},{"path":[4,19,4,3,2,0,1],"span":[1022,4,27]},{"path":[4,19,4,3,2,0,2],"span":[1022,30,31]},{"path":[4,19,4,3,2,1],"span":[1023,4,15]},{"path":[4,19,4,3,2,1,1],"span":[1023,4,10]},{"path":[4,19,4,3,2,1,2],"span":[1023,13,14]},{"path":[4,19,4,3,2,2],"span":[1024,4,13]},{"path":[4,19,4,3,2,2,1],"span":[1024,4,8]},{"path":[4,19,4,3,2,2,2],"span":[1024,11,12]},{"path":[4,19,4,3,4],"span":[1025,4,15]},{"path":[4,19,4,3,4,0],"span":[1025,13,14]},{"path":[4,19,4,3,4,0,1],"span":[1025,13,14]},{"path":[4,19,4,3,4,0,2],"span":[1025,13,14]},{"path":[4,19,2,3],"span":[1027,2,1036,4]},{"path":[4,19,2,3,4],"span":[1027,2,10]},{"path":[4,19,2,3,6],"span":[1027,11,25]},{"path":[4,19,2,3,1],"span":[1027,26,41]},{"path":[4,19,2,3,3],"span":[1027,44,45]},{"path":[4,19,2,3,8],"span":[1027,46,1036,3]},{"path":[4,19,2,3,8,17],"span":[1028,4,33]},{"path":[4,19,2,3,8,19,0],"span":[1029,4,31]},{"path":[4,19,2,3,8,19,1],"span":[1030,4,30]},{"path":[4,19,2,3,8,22],"span":[1031,4,1033,5]},{"path":[4,19,2,3,8,22,1],"span":[1032,6,38]},{"path":[4,19,2,3,8,20,0],"span":[1034,4,65]},{"path":[4,19,2,3,8,20,0,3],"span":[1034,25,48]},{"path":[4,19,2,3,8,20,0,2],"span":[1034,50,63]},{"path":[4,19,2,3,8,20,1],"span":[1035,4,67]},{"path":[4,19,2,3,8,20,1,3],"span":[1035,25,48]},{"path":[4,19,2,3,8,20,1,2],"span":[1035,50,65]},{"path":[4,19,4,4],"span":[1038,2,1042,3]},{"path":[4,19,4,4,1],"span":[1038,7,22]},{"path":[4,19,4,4,2,0],"span":[1039,4,33]},{"path":[4,19,4,4,2,0,1],"span":[1039,4,28]},{"path":[4,19,4,4,2,0,2],"span":[1039,31,32]},{"path":[4,19,4,4,2,1],"span":[1040,4,24]},{"path":[4,19,4,4,2,1,1],"span":[1040,4,19]},{"path":[4,19,4,4,2,1,2],"span":[1040,22,23]},{"path":[4,19,4,4,2,2],"span":[1041,4,18]},{"path":[4,19,4,4,2,2,1],"span":[1041,4,13]},{"path":[4,19,4,4,2,2,2],"span":[1041,16,17]},{"path":[4,19,2,4],"span":[1043,2,1051,4]},{"path":[4,19,2,4,4],"span":[1043,2,10]},{"path":[4,19,2,4,6],"span":[1043,11,26]},{"path":[4,19,2,4,1],"span":[1043,27,43]},{"path":[4,19,2,4,3],"span":[1043,46,47]},{"path":[4,19,2,4,8],"span":[1043,48,1051,3]},{"path":[4,19,2,4,8,17],"span":[1044,4,33]},{"path":[4,19,2,4,8,19,0],"span":[1045,4,31]},{"path":[4,19,2,4,8,19,1],"span":[1046,4,30]},{"path":[4,19,2,4,8,22],"span":[1047,4,1049,5]},{"path":[4,19,2,4,8,22,1],"span":[1048,6,38]},{"path":[4,19,2,4,8,20,0],"span":[1050,4,76]},{"path":[4,19,2,4,8,20,0,3],"span":[1050,25,48]},{"path":[4,19,2,4,8,20,0,2],"span":[1050,50,74]},{"path":[4,19,4,5],"span":[1053,2,1057,3]},{"path":[4,19,4,5,1],"span":[1053,7,17]},{"path":[4,19,4,5,2,0],"span":[1054,4,28]},{"path":[4,19,4,5,2,0,1],"span":[1054,4,23]},{"path":[4,19,4,5,2,0,2],"span":[1054,26,27]},{"path":[4,19,4,5,2,1],"span":[1055,4,14]},{"path":[4,19,4,5,2,1,1],"span":[1055,4,9]},{"path":[4,19,4,5,2,1,2],"span":[1055,12,13]},{"path":[4,19,4,5,2,2],"span":[1056,4,27]},{"path":[4,19,4,5,2,2,1],"span":[1056,4,22]},{"path":[4,19,4,5,2,2,2],"span":[1056,25,26]},{"path":[4,19,2,5],"span":[1058,2,1068,4]},{"path":[4,19,2,5,4],"span":[1058,2,10]},{"path":[4,19,2,5,6],"span":[1058,11,21]},{"path":[4,19,2,5,1],"span":[1058,22,33]},{"path":[4,19,2,5,3],"span":[1058,36,37]},{"path":[4,19,2,5,8],"span":[1058,38,1068,3]},{"path":[4,19,2,5,8,17],"span":[1059,4,33]},{"path":[4,19,2,5,8,19,0],"span":[1060,4,33]},{"path":[4,19,2,5,8,19,1],"span":[1061,4,30]},{"path":[4,19,2,5,8,19,2],"span":[1062,4,30]},{"path":[4,19,2,5,8,22],"span":[1063,4,1065,5]},{"path":[4,19,2,5,8,22,1],"span":[1064,6,38]},{"path":[4,19,2,5,8,20,0],"span":[1066,4,79]},{"path":[4,19,2,5,8,20,0,3],"span":[1066,25,48]},{"path":[4,19,2,5,8,20,0,2],"span":[1066,50,77]},{"path":[4,19,2,5,8,20,1],"span":[1067,4,66]},{"path":[4,19,2,5,8,20,1,3],"span":[1067,25,48]},{"path":[4,19,2,5,8,20,1,2],"span":[1067,50,64]},{"path":[4,19,9],"span":[1070,2,15]},{"path":[4,19,9,0],"span":[1070,11,14]},{"path":[4,19,9,0,1],"span":[1070,11,14]},{"path":[4,19,9,0,2],"span":[1070,11,14]},{"path":[4,19,5],"span":[1072,2,1089,4]},{"path":[4,19,5,0],"span":[1072,13,25]},{"path":[4,19,5,0,1],"span":[1072,13,17]},{"path":[4,19,5,0,2],"span":[1072,21,25]},{"path":[4,19,5,0,3],"span":[1072,26,1089,3]},{"path":[4,19,5,0,3,2,0],"span":[1073,4,1077,5]},{"path":[4,19,5,0,3,2,0,1],"span":[1074,6,18]},{"path":[4,19,5,0,3,2,0,2],"span":[1075,6,26]},{"path":[4,19,5,0,3,2,0,3],"span":[1076,6,29]},{"path":[4,19,5,0,3,2,1],"span":[1078,4,1082,5]},{"path":[4,19,5,0,3,2,1,1],"span":[1079,6,18]},{"path":[4,19,5,0,3,2,1,2],"span":[1080,6,27]},{"path":[4,19,5,0,3,2,1,3],"span":[1081,6,30]},{"path":[4,19,5,0,3,2,2],"span":[1083,4,79]},{"path":[4,19,5,0,3,2,2,1],"span":[1083,20,32]},{"path":[4,19,5,0,3,2,2,2],"span":[1083,34,53]},{"path":[4,19,5,0,3,2,2,3],"span":[1083,55,77]},{"path":[4,19,5,0,3,2,3],"span":[1084,4,1088,5]},{"path":[4,19,5,0,3,2,3,1],"span":[1085,6,18]},{"path":[4,19,5,0,3,2,3,2],"span":[1086,6,29]},{"path":[4,19,5,0,3,2,3,3],"span":[1087,6,32]},{"path":[4,19,5],"span":[1091,2,26],"trailingComments":" For internal testing\n"},{"path":[4,19,5,1],"span":[1091,13,25]},{"path":[4,19,5,1,1],"span":[1091,13,17]},{"path":[4,19,5,1,2],"span":[1091,21,25]},{"path":[4,19,5],"span":[1092,2,19],"trailingComments":" for https://github.com/bufbuild/protobuf-es\n"},{"path":[4,19,5,2],"span":[1092,13,18]},{"path":[4,19,5,2,1],"span":[1092,13,18]},{"path":[4,19,5,2,2],"span":[1092,13,18]},{"path":[4,20],"span":[1099,0,1125,1],"leadingComments":" A compiled specification for the defaults of a set of features.  These\n messages are generated from FeatureSet extensions and can be used to seed\n feature resolution. The resolution with this object becomes a simple search\n for the closest matching edition, followed by proto merges.\n"},{"path":[4,20,1],"span":[1099,8,26]},{"path":[4,20,3,0],"span":[1104,2,1115,3],"leadingComments":" A map from every known edition with a unique set of defaults to its\n defaults. Not all editions may be contained here.  For a given edition,\n the defaults at the closest matching edition ordered at or before it should\n be used.  This field must be in strict ascending order by edition.\n"},{"path":[4,20,3,0,1],"span":[1104,10,34]},{"path":[4,20,3,0,2,0],"span":[1105,4,33]},{"path":[4,20,3,0,2,0,4],"span":[1105,4,12]},{"path":[4,20,3,0,2,0,6],"span":[1105,13,20]},{"path":[4,20,3,0,2,0,1],"span":[1105,21,28]},{"path":[4,20,3,0,2,0,3],"span":[1105,31,32]},{"path":[4,20,3,0,2,1],"span":[1108,4,49],"leadingComments":" Defaults of features that can be overridden in this edition.\n"},{"path":[4,20,3,0,2,1,4],"span":[1108,4,12]},{"path":[4,20,3,0,2,1,6],"span":[1108,13,23]},{"path":[4,20,3,0,2,1,1],"span":[1108,24,44]},{"path":[4,20,3,0,2,1,3],"span":[1108,47,48]},{"path":[4,20,3,0,2,2],"span":[1111,4,43],"leadingComments":" Defaults of features that can't be overridden in this edition.\n"},{"path":[4,20,3,0,2,2,4],"span":[1111,4,12]},{"path":[4,20,3,0,2,2,6],"span":[1111,13,23]},{"path":[4,20,3,0,2,2,1],"span":[1111,24,38]},{"path":[4,20,3,0,2,2,3],"span":[1111,41,42]},{"path":[4,20,3,0,9],"span":[1113,4,18]},{"path":[4,20,3,0,9,0],"span":[1113,13,14]},{"path":[4,20,3,0,9,0,1],"span":[1113,13,14]},{"path":[4,20,3,0,9,0,2],"span":[1113,13,14]},{"path":[4,20,3,0,9,1],"span":[1113,16,17]},{"path":[4,20,3,0,9,1,1],"span":[1113,16,17]},{"path":[4,20,3,0,9,1,2],"span":[1113,16,17]},{"path":[4,20,3,0,10],"span":[1114,4,24]},{"path":[4,20,3,0,10,0],"span":[1114,13,23]},{"path":[4,20,2,0],"span":[1116,2,49]},{"path":[4,20,2,0,4],"span":[1116,2,10]},{"path":[4,20,2,0,6],"span":[1116,11,35]},{"path":[4,20,2,0,1],"span":[1116,36,44]},{"path":[4,20,2,0,3],"span":[1116,47,48]},{"path":[4,20,2,1],"span":[1120,2,39],"leadingComments":" The minimum supported edition (inclusive) when this was constructed.\n Editions before this will not have defaults.\n"},{"path":[4,20,2,1,4],"span":[1120,2,10]},{"path":[4,20,2,1,6],"span":[1120,11,18]},{"path":[4,20,2,1,1],"span":[1120,19,34]},{"path":[4,20,2,1,3],"span":[1120,37,38]},{"path":[4,20,2,2],"span":[1124,2,39],"leadingComments":" The maximum known edition (inclusive) when this was constructed. Editions\n after this will not have reliable defaults.\n"},{"path":[4,20,2,2,4],"span":[1124,2,10]},{"path":[4,20,2,2,6],"span":[1124,11,18]},{"path":[4,20,2,2,1],"span":[1124,19,34]},{"path":[4,20,2,2,3],"span":[1124,37,38]},{"path":[4,21],"span":[1132,0,1268,1],"leadingComments":" Encapsulates information about the original source file from which a\n FileDescriptorProto was generated.\n","leadingDetachedComments":[" ===================================================================\n Optional source code info\n"]},{"path":[4,21,1],"span":[1132,8,22]},{"path":[4,21,2,0],"span":[1176,2,33],"leadingComments":" A Location identifies a piece of source code in a .proto file which\n corresponds to a particular definition.  This information is intended\n to be useful to IDEs, code indexers, documentation generators, and similar\n tools.\n\n For example, say we have a file like:\n   message Foo {\n     optional string foo = 1;\n   }\n Let's look at just the field definition:\n   optional string foo = 1;\n   ^       ^^     ^^  ^  ^^^\n   a       bc     de  f  ghi\n We have the following locations:\n   span   path               represents\n   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.\n   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).\n   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).\n   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).\n   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).\n\n Notes:\n - A location may refer to a repeated field itself (i.e. not to any\n   particular index within it).  This is used whenever a set of elements are\n   logically enclosed in a single code segment.  For example, an entire\n   extend block (possibly containing multiple extension definitions) will\n   have an outer location whose path refers to the \"extensions\" repeated\n   field without an index.\n - Multiple locations may have the same path.  This happens when a single\n   logical declaration is spread out across multiple places.  The most\n   obvious example is the \"extend\" block again -- there may be multiple\n   extend blocks in the same scope, each of which will have the same path.\n - A location's span is not always a subset of its parent's span.  For\n   example, the \"extendee\" of an extension declaration appears at the\n   beginning of the \"extend\" block and is shared by all extensions within\n   the block.\n - Just because a location's span is a subset of some other location's span\n   does not mean that it is a descendant.  For example, a \"group\" defines\n   both a type and a field in a single declaration.  Thus, the locations\n   corresponding to the type and field and their components will overlap.\n - Code which tries to interpret locations should probably be designed to\n   ignore those that it doesn't understand, as more types of locations could\n   be recorded in the future.\n"},{"path":[4,21,2,0,4],"span":[1176,2,10]},{"path":[4,21,2,0,6],"span":[1176,11,19]},{"path":[4,21,2,0,1],"span":[1176,20,28]},{"path":[4,21,2,0,3],"span":[1176,31,32]},{"path":[4,21,3,0],"span":[1177,2,1260,3]},{"path":[4,21,3,0,1],"span":[1177,10,18]},{"path":[4,21,3,0,2,0],"span":[1201,4,44],"leadingComments":" Identifies which part of the FileDescriptorProto was defined at this\n location.\n\n Each element is a field number or an index.  They form a path from\n the root FileDescriptorProto to the place where the definition appears.\n For example, this path:\n   [ 4, 3, 2, 7, 1 ]\n refers to:\n   file.message_type(3)  // 4, 3\n       .field(7)         // 2, 7\n       .name()           // 1\n This is because FileDescriptorProto.message_type has field number 4:\n   repeated DescriptorProto message_type = 4;\n and DescriptorProto.field has field number 2:\n   repeated FieldDescriptorProto field = 2;\n and FieldDescriptorProto.name has field number 1:\n   optional string name = 1;\n\n Thus, the above path gives the location of a field name.  If we removed\n the last element:\n   [ 4, 3, 2, 7 ]\n this path refers to the whole field declaration (from the beginning\n of the label to the terminating semicolon).\n"},{"path":[4,21,3,0,2,0,4],"span":[1201,4,12]},{"path":[4,21,3,0,2,0,5],"span":[1201,13,18]},{"path":[4,21,3,0,2,0,1],"span":[1201,19,23]},{"path":[4,21,3,0,2,0,3],"span":[1201,26,27]},{"path":[4,21,3,0,2,0,8],"span":[1201,28,43]},{"path":[4,21,3,0,2,0,8,2],"span":[1201,29,42]},{"path":[4,21,3,0,2,1],"span":[1208,4,44],"leadingComments":" Always has exactly three or four elements: start line, start column,\n end line (optional, otherwise assumed same as start line), end column.\n These are packed into a single field for efficiency.  Note that line\n and column numbers are zero-based -- typically you will want to add\n 1 to each before displaying to a user.\n"},{"path":[4,21,3,0,2,1,4],"span":[1208,4,12]},{"path":[4,21,3,0,2,1,5],"span":[1208,13,18]},{"path":[4,21,3,0,2,1,1],"span":[1208,19,23]},{"path":[4,21,3,0,2,1,3],"span":[1208,26,27]},{"path":[4,21,3,0,2,1,8],"span":[1208,28,43]},{"path":[4,21,3,0,2,1,8,2],"span":[1208,29,42]},{"path":[4,21,3,0,2,2],"span":[1257,4,41],"leadingComments":" If this SourceCodeInfo represents a complete declaration, these are any\n comments appearing before and after the declaration which appear to be\n attached to the declaration.\n\n A series of line comments appearing on consecutive lines, with no other\n tokens appearing on those lines, will be treated as a single comment.\n\n leading_detached_comments will keep paragraphs of comments that appear\n before (but not connected to) the current element. Each paragraph,\n separated by empty lines, will be one comment element in the repeated\n field.\n\n Only the comment content is provided; comment markers (e.g. //) are\n stripped out.  For block comments, leading whitespace and an asterisk\n will be stripped from the beginning of each line other than the first.\n Newlines are included in the output.\n\n Examples:\n\n   optional int32 foo = 1;  // Comment attached to foo.\n   // Comment attached to bar.\n   optional int32 bar = 2;\n\n   optional string baz = 3;\n   // Comment attached to baz.\n   // Another line attached to baz.\n\n   // Comment attached to moo.\n   //\n   // Another line attached to moo.\n   optional double moo = 4;\n\n   // Detached comment for corge. This is not leading or trailing comments\n   // to moo or corge because there are blank lines separating it from\n   // both.\n\n   // Detached comment for corge paragraph 2.\n\n   optional string corge = 5;\n   /* Block comment attached\n    * to corge.  Leading asterisks\n    * will be removed. */\n   /* Block comment attached to\n    * grault. */\n   optional int32 grault = 6;\n\n   // ignored detached comments.\n"},{"path":[4,21,3,0,2,2,4],"span":[1257,4,12]},{"path":[4,21,3,0,2,2,5],"span":[1257,13,19]},{"path":[4,21,3,0,2,2,1],"span":[1257,20,36]},{"path":[4,21,3,0,2,2,3],"span":[1257,39,40]},{"path":[4,21,3,0,2,3],"span":[1258,4,42]},{"path":[4,21,3,0,2,3,4],"span":[1258,4,12]},{"path":[4,21,3,0,2,3,5],"span":[1258,13,19]},{"path":[4,21,3,0,2,3,1],"span":[1258,20,37]},{"path":[4,21,3,0,2,3,3],"span":[1258,40,41]},{"path":[4,21,3,0,2,4],"span":[1259,4,50]},{"path":[4,21,3,0,2,4,4],"span":[1259,4,12]},{"path":[4,21,3,0,2,4,5],"span":[1259,13,19]},{"path":[4,21,3,0,2,4,1],"span":[1259,20,45]},{"path":[4,21,3,0,2,4,3],"span":[1259,48,49]},{"path":[4,21,5],"span":[1263,2,1267,5],"leadingComments":" Extensions for tooling.\n"},{"path":[4,21,5,0],"span":[1263,13,22]},{"path":[4,21,5,0,1],"span":[1263,13,22]},{"path":[4,21,5,0,2],"span":[1263,13,22]},{"path":[4,21,5,0,3],"span":[1263,23,1267,4]},{"path":[4,21,5,0,3,2,0],"span":[1263,24,1267,3]},{"path":[4,21,5,0,3,2,0,1],"span":[1264,4,21]},{"path":[4,21,5,0,3,2,0,3],"span":[1265,4,54]},{"path":[4,21,5,0,3,2,0,2],"span":[1266,4,66]},{"path":[4,22],"span":[1273,0,1306,1],"leadingComments":" Describes the relationship between generated code and its original source\n file. A GeneratedCodeInfo message is associated with only one generated\n source file, but may contain references to different source .proto files.\n"},{"path":[4,22,1],"span":[1273,8,25]},{"path":[4,22,2,0],"span":[1276,2,37],"leadingComments":" An Annotation connects some span of text in generated code to an element\n of its generating .proto file.\n"},{"path":[4,22,2,0,4],"span":[1276,2,10]},{"path":[4,22,2,0,6],"span":[1276,11,21]},{"path":[4,22,2,0,1],"span":[1276,22,32]},{"path":[4,22,2,0,3],"span":[1276,35,36]},{"path":[4,22,3,0],"span":[1277,2,1305,3]},{"path":[4,22,3,0,1],"span":[1277,10,20]},{"path":[4,22,3,0,2,0],"span":[1280,4,44],"leadingComments":" Identifies the element in the original source .proto file. This field\n is formatted the same as SourceCodeInfo.Location.path.\n"},{"path":[4,22,3,0,2,0,4],"span":[1280,4,12]},{"path":[4,22,3,0,2,0,5],"span":[1280,13,18]},{"path":[4,22,3,0,2,0,1],"span":[1280,19,23]},{"path":[4,22,3,0,2,0,3],"span":[1280,26,27]},{"path":[4,22,3,0,2,0,8],"span":[1280,28,43]},{"path":[4,22,3,0,2,0,8,2],"span":[1280,29,42]},{"path":[4,22,3,0,2,1],"span":[1283,4,36],"leadingComments":" Identifies the filesystem path to the original source .proto.\n"},{"path":[4,22,3,0,2,1,4],"span":[1283,4,12]},{"path":[4,22,3,0,2,1,5],"span":[1283,13,19]},{"path":[4,22,3,0,2,1,1],"span":[1283,20,31]},{"path":[4,22,3,0,2,1,3],"span":[1283,34,35]},{"path":[4,22,3,0,2,2],"span":[1287,4,29],"leadingComments":" Identifies the starting offset in bytes in the generated code\n that relates to the identified object.\n"},{"path":[4,22,3,0,2,2,4],"span":[1287,4,12]},{"path":[4,22,3,0,2,2,5],"span":[1287,13,18]},{"path":[4,22,3,0,2,2,1],"span":[1287,19,24]},{"path":[4,22,3,0,2,2,3],"span":[1287,27,28]},{"path":[4,22,3,0,2,3],"span":[1292,4,27],"leadingComments":" Identifies the ending offset in bytes in the generated code that\n relates to the identified object. The end offset should be one past\n the last relevant byte (so the length of the text = end - begin).\n"},{"path":[4,22,3,0,2,3,4],"span":[1292,4,12]},{"path":[4,22,3,0,2,3,5],"span":[1292,13,18]},{"path":[4,22,3,0,2,3,1],"span":[1292,19,22]},{"path":[4,22,3,0,2,3,3],"span":[1292,25,26]},{"path":[4,22,3,0,4,0],"span":[1296,4,1303,5],"leadingComments":" Represents the identified object's effect on the element in the original\n .proto file.\n"},{"path":[4,22,3,0,4,0,1],"span":[1296,9,17]},{"path":[4,22,3,0,4,0,2,0],"span":[1298,6,15],"leadingComments":" There is no effect or the effect is indescribable.\n"},{"path":[4,22,3,0,4,0,2,0,1],"span":[1298,6,10]},{"path":[4,22,3,0,4,0,2,0,2],"span":[1298,13,14]},{"path":[4,22,3,0,4,0,2,1],"span":[1300,6,14],"leadingComments":" The element is set or otherwise mutated.\n"},{"path":[4,22,3,0,4,0,2,1,1],"span":[1300,6,9]},{"path":[4,22,3,0,4,0,2,1,2],"span":[1300,12,13]},{"path":[4,22,3,0,4,0,2,2],"span":[1302,6,16],"leadingComments":" An alias to the element is returned.\n"},{"path":[4,22,3,0,4,0,2,2,1],"span":[1302,6,11]},{"path":[4,22,3,0,4,0,2,2,2],"span":[1302,14,15]},{"path":[4,22,3,0,2,4],"span":[1304,4,35]},{"path":[4,22,3,0,2,4,4],"span":[1304,4,12]},{"path":[4,22,3,0,2,4,6],"span":[1304,13,21]},{"path":[4,22,3,0,2,4,1],"span":[1304,22,30]},{"path":[4,22,3,0,2,4,3],"span":[1304,33,34]}]},"bufExtension":{"isImport":true,"isSyntaxUnspecified":false}},{"name":"deps/protobuf/src/elixir.proto","dependency":["google/protobuf/descriptor.proto"],"extension":[{"name":"elixir_module_prefix","number":1047,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","extendee":".google.protobuf.FileOptions","jsonName":"elixirModulePrefix"}],"sourceCodeInfo":{"location":[{"span":[0,0,8,1]},{"path":[12],"span":[0,0,18]},{"path":[3,0],"span":[2,0,42]},{"path":[7],"span":[4,0,8,1]},{"path":[7,0],"span":[7,2,46],"leadingComments":" 1047 is allocated to this project by Google\n It's actually a little hack, so we now have to use the same value with that in lib/google/descriptor.pb.ex:401.\n"},{"path":[7,0,2],"span":[4,7,34]},{"path":[7,0,4],"span":[7,2,10]},{"path":[7,0,5],"span":[7,11,17]},{"path":[7,0,1],"span":[7,18,38]},{"path":[7,0,3],"span":[7,41,45]}]},"bufExtension":{"isImport":false,"isSyntaxUnspecified":false}}]}